(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-781fa144"],{"0b42":function(e,t,o){var r=o("da84"),l=o("e8b5"),s=o("68ee"),n=o("861d"),c=o("b622"),_=c("species"),a=r.Array;e.exports=function(e){var t;return l(e)&&(t=e.constructor,s(t)&&(t===a||l(t.prototype))?t=void 0:n(t)&&(t=t[_],null===t&&(t=void 0))),void 0===t?a:t}},"1dde":function(e,t,o){var r=o("d039"),l=o("b622"),s=o("2d00"),n=l("species");e.exports=function(e){return s>=51||!r((function(){var t=[],o=t.constructor={};return o[n]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},"4de4":function(e,t,o){"use strict";var r=o("23e7"),l=o("b727").filter,s=o("1dde"),n=s("filter");r({target:"Array",proto:!0,forced:!n},{filter:function(e){return l(this,e,arguments.length>1?arguments[1]:void 0)}})},"4fa3":function(e,t,o){},"65f0":function(e,t,o){var r=o("0b42");e.exports=function(e,t){return new(r(e))(0===t?0:t)}},"922a":function(e,t,o){"use strict";o("4fa3")},b727:function(e,t,o){var r=o("0366"),l=o("e330"),s=o("44ad"),n=o("7b0b"),c=o("07fa"),_=o("65f0"),a=l([].push),v=function(e){var t=1==e,o=2==e,l=3==e,v=4==e,p=6==e,i=7==e,u=5==e||p;return function(h,d,m,f){for(var b,g,T=n(h),j=s(T),C=r(d,m),k=c(j),S=0,y=f||_,P=t?y(h,k):o||i?y(h,0):void 0;k>S;S++)if((u||S in j)&&(b=j[S],g=C(b,S,T),e))if(t)P[S]=g;else if(g)switch(e){case 3:return!0;case 5:return b;case 6:return S;case 2:a(P,b)}else switch(e){case 4:return!1;case 7:a(P,b)}return p?-1:l||v?v:P}};e.exports={forEach:v(0),map:v(1),filter:v(2),some:v(3),every:v(4),find:v(5),findIndex:v(6),filterReject:v(7)}},e8b5:function(e,t,o){var r=o("c6b6");e.exports=Array.isArray||function(e){return"Array"==r(e)}},ead7:function(e,t,o){"use strict";o.r(t);var r=function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",{staticClass:"markdown-body"},[o(e.currentView,{tag:"component"})],1)},l=[],s=(o("4de4"),o("d3b7"),function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)}),n=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[e._v("HTTP缓存")]),o("blockquote",[o("p",[e._v("编辑日期:2022.3.28")])]),o("blockquote",[o("p",[e._v("参考文献")]),o("p",[e._v("https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control")]),o("p",[e._v("https://blog.csdn.net/jiangshangchunjiezi/article/details/104488266")])]),o("h2",[e._v("1.为什么使用缓存")]),o("ul",[o("li",[e._v("减少延迟")]),o("li",[e._v("减少网络通信")]),o("li",[e._v("增强网站响应性")])]),o("hr"),o("h2",[e._v("2.Cache-Control")]),o("p",[o("code",{pre:!0},[e._v("Cache-Control")]),e._v("是浏览器缓存的控制开关，不设置的则会重新向服务器发起请求；")]),o("p",[o("code",{pre:!0},[e._v("Cache-Control")]),e._v("是通用的消息头字段，其指令是单向的，在请求头中的"),o("code",{pre:!0},[e._v("Cache-Control")]),e._v("不一定包含在响应头中")]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":""}},[e._v('accept-ranges: bytes\naccess-control-allow-origin: *\nage: 75617\ncache-control: max-age=31536000\ncontent-encoding: br\ncontent-md5: qEixiiEsURBAE2zakMuWhg==\ncontent-type: text/javascript; charset=utf-8\ndate: Sun, 27 Mar 2022 03:36:45 GMT\netag: "a848b18a212c511040136cda90cb9686"\nexpires: Tue, 29 Mar 2022 06:36:28 GMT\nlast-modified: Thu, 17 Mar 2022 08:23:27 GMT\nohc-cache-hit: jn7un52 [2]\nohc-file-size: 617427\nserver: JSP3/2.0.14\ntiming-allow-origin: *\nx-bce-content-crc32: 3171064980\nx-bce-debug-id: 6nzJkohMEqwAdOz3SUUley/u9NMny0t9vcSu4tv9cbAc/BK+iqjrnY4UOuzgjSFml7kLIoVioeUGk8RYgsDrHQ==\nx-bce-request-id: fde4f928-13ca-4600-83cf-ee8d9ec97ff8\nx-bce-storage-class: STANDARD\n')])]),o("p",[e._v("客户端在HTTP请求中可以使用的"),o("code",{pre:!0},[e._v("Cache-Control")]),e._v("指令")]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":""}},[e._v("Cache-Control: max-age=<seconds>\nCache-Control: max-stale[=<seconds>]\nCache-Control: min-fresh=<seconds>\nCache-control: no-cache\nCache-control: no-store\nCache-control: no-transform\nCache-control: only-if-cached\n")])]),o("p",[e._v("服务器在HTTP请求中可以使用的"),o("code",{pre:!0},[e._v("Cache-Control")]),e._v("指令")]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":""}},[e._v("Cache-control: must-revalidate\nCache-control: no-cache\nCache-control: no-store\nCache-control: no-transform\nCache-control: public\nCache-control: private\nCache-control: proxy-revalidate\nCache-Control: max-age=<seconds>\nCache-control: s-maxage=<seconds>\n")])]),o("blockquote",[o("p",[o("code",{pre:!0},[e._v("public")]),e._v(" 表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存，即使是通常不可缓存的内容。（例如：1.该响应没有max-age指令或Expires消息头；2. 该响应对应的请求方法是 POST 。）")])]),o("blockquote",[o("p",[o("code",{pre:!0},[e._v("private")]),e._v(" 表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。私有缓存可以缓存响应内容，比如：对应用户的本地浏览器。")])]),o("blockquote",[o("p",[o("code",{pre:!0},[e._v("no-cache")]),e._v(" 在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证(协商缓存验证)。")])]),o("blockquote",[o("p",[o("code",{pre:!0},[e._v("no-store")]),e._v(" 缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存。")])]),o("blockquote",[o("p",[o("code",{pre:!0},[e._v("max-age=<seconds>")]),e._v(" 设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与Expires相反，时间是相对于请求的时间。若在此时间内发起请求，会用缓存；若超时，则会向服务端发请求。")])]),o("hr"),o("h2",[e._v("3.Expires")]),o("p",[o("code",{pre:!0},[e._v("Expires")]),e._v(" 响应头包含日期/时间， 即在此时候之后，响应过期。")]),o("p",[e._v("如果在"),o("code",{pre:!0},[e._v("Cache-Control")]),e._v("响应头设置了 "),o("code",{pre:!0},[e._v("max-age")]),e._v(" 或者 "),o("code",{pre:!0},[e._v("s-max-age")]),e._v(" 指令，那么 "),o("code",{pre:!0},[e._v("Expires")]),e._v(" 头会被忽略。")]),o("hr"),o("h2",[e._v("4.协商缓存")]),o("p",[o("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200224232616448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW5nc2hhbmdjaHVuamllemk=,size_16,color_FFFFFF,t_70",alt:"协商缓存过程"}})]),o("blockquote",[o("p",[o("code",{pre:!0},[e._v("Etag")]),e._v("、"),o("code",{pre:!0},[e._v("If-None-Match")])]),o("blockquote",[o("p",[e._v("浏览器第一次向服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上ETag字段；")]),o("p",[e._v("浏览器再次跟服务器请求这个资源时，在request的header上加上If-None-Match，这个值就是上一次请求时返回的ETag的值；")]),o("p",[e._v("服务器再次收到资源请求时，再根据资源生成一个新的ETag，与浏览器传过来If-None-Match比较，如果这两个值相同，则说明资源没有变化，返回304 Not Modified, 浏览器从缓存中加载资源，否则返回200 资源内容。与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化")])])]),o("blockquote",[o("p",[o("code",{pre:!0},[e._v("Last-Modified")]),e._v("、"),o("code",{pre:!0},[e._v("If-Modified-Since")])]),o("blockquote",[o("p",[e._v("浏览器第一次向服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上Last-Modified字段，表示该资源在服务器上的最后修改时间；")]),o("p",[e._v("浏览器再次向服务器请求这个资源时，在request的header上加上If-Modified-Since字段，这个值就是上一次请求时返回的Last-Modified的值;")]),o("p",[e._v("服务器收到资源请求时，比较If-Modified-Since字段值和被请求资源的最后修改时间，若资源最后修改时间较旧，则说明文件没有修改，返回304 Not Modified, 浏览器从缓存中加载资源；若不相同，说明文件被更新，浏览器直接从服务器加载资源, 返回200；")]),o("p",[e._v("重新加载资源时更新Last-Modified Header")])])]),o("hr"),o("blockquote",[o("p",[e._v("为什么有了"),o("code",{pre:!0},[e._v("Last-Modified")]),e._v("，还需要使用"),o("code",{pre:!0},[e._v("Etag")]),e._v("？")])]),o("p",[e._v("一些文件可能被修改过，但是其内容并未变化，这时候我们不希望客户端认为文件进行了改变，而重新请求")]),o("ul",[o("li",[e._v("部分文件修改频繁，1s内多次修改，而"),o("code",{pre:!0},[e._v("If-Modified-Since")]),e._v("只能检查的粒度为s")]),o("li",[e._v("某些服务器不能精确的得到文件的最后修改时间。 对于上述情景，利用"),o("code",{pre:!0},[e._v("ETag")]),e._v("能够更加准确的控制缓存，因为ETag是服务器自动生成的资源在服务器端的唯一标识符，资源每次变动，都会生成新的ETag值。"),o("code",{pre:!0},[e._v("Last-Modified")]),e._v("与"),o("code",{pre:!0},[e._v("ETag")]),e._v("是可以一起使用的，但服务器会"),o("code",{pre:!0},[e._v("优先验证ETag")]),e._v("。")])]),o("hr"),o("h2",[e._v("5.响应中Age与Date")]),o("blockquote",[o("p",[o("code",{pre:!0},[e._v("Date")]),e._v(" 原服务器第一次响应的时间")]),o("p",[o("code",{pre:!0},[e._v("Age")]),e._v(" 表示中间环节(CDN或缓存服务器)从服务器拿到数据之后的时间。如果是客户端看到是0秒，代表是从服务器拿到的最新的数据。")])]),o("hr"),o("h2",[e._v("6.浏览器缓存位置")]),o("blockquote",[o("p",[e._v("从高到低排序")])]),o("ul",[o("li",[o("code",{pre:!0},[e._v("Service Worker")])])]),o("p",[e._v("Service worker是一个注册在指定源和路径下的事件驱动worker。它采用JavaScript控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。你可以完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。")]),o("ul",[o("li",[o("code",{pre:!0},[e._v("Memory Cache")])])]),o("p",[e._v("Memory Cache 就是内存缓存，它的"),o("code",{pre:!0},[e._v("效率最快")]),e._v("，但缓存"),o("code",{pre:!0},[e._v("持续性很短")]),e._v("，会"),o("code",{pre:!0},[e._v("随着进程的释放而释放")]),e._v("。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")]),o("ul",[o("li",[o("code",{pre:!0},[e._v("Disk Cache")])])]),o("p",[e._v("Disk Cache 也就是存储在硬盘中的缓存，"),o("code",{pre:!0},[e._v("读取速度慢点")]),e._v("，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。在所有浏览器缓存中，Disk Cache "),o("code",{pre:!0},[e._v("覆盖面基本是最大的")]),e._v("。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，"),o("code",{pre:!0},[e._v("相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据")]),e._v("。")])])])])}],c=o("2877"),_={},a=Object(c["a"])(_,s,n,!1,null,null,null),v=a.exports,p=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},i=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[e._v("浏览器输入Url会发生什么？")]),o("p",[e._v("编辑日期：2022.3.28")]),o("blockquote",[o("p",[e._v("参考链接")]),o("p",[e._v("https://www.jianshu.com/p/7eea6fbc5fcd")])]),o("blockquote",[o("p",[e._v("详细过程")])]),o("ul",[o("li",[e._v("1.判断当前url的缓存内容是否可用,决定是否向服务器请求资源")]),o("li",[e._v("2.DNS解析，寻找域名映射的IP地址")]),o("li",[e._v("3.浏览器与服务器通过三次握手建立TCP连接")]),o("li",[e._v("4.浏览器向服务器发送HTTP请求")]),o("li",[e._v("5.浏览器接收服务器的HTTP响应报文")]),o("li",[e._v("6.浏览器进行页面渲染")]),o("li",[e._v("7.通过四次挥手关闭TCP连接")])]),o("p",[o("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200417223938321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NDX1RvZ2V0aGVy,size_16,color_FFFFFF,t_70",alt:"浏览器页面渲染"}})]),o("blockquote",[o("p",[e._v("1.解析HTML生成DOM树；")]),o("p",[e._v("2.解析CSS生成CSS规则；")]),o("p",[e._v("3.合并DOM树和渲染规则生成渲染树render Tree")]),o("p",[e._v("4.对渲染树进行布局计算，对页面元素进行位置布局计算")]),o("p",[e._v("5.绘制render树")]),o("p",[e._v("6.浏览器将各层的信息发送给GPU,由进行图层的合成，并展示在屏幕上；")])]),o("p",[e._v("浏览器在未收到完成的HTML文件时，就进行了页面的渲染，在遇到外部的脚本标签或者样式时，就会重新发送http请求重复上述过程，在这之中可能会发生页面的回流或者重绘；")]),o("hr"),o("h2",[e._v("重绘和重排（回流）")]),o("blockquote"),o("p",[e._v("Reflow和Repaint，回流也称之为Layout,一般意味着页面的内容、结构、位置尺寸发生了变化，需要重新计数和渲染树；")]),o("p",[e._v("Repaint意味着页面的改变只是影响到页面的一些元素外观之类的")]),o("p",[e._v("显然，回流的成本要高于重绘，DOM树中节点的reflow很可能导致与其相关节点的reflow")]),o("blockquote",[o("p",[e._v("减少重排的方法:")]),o("ul",[o("li",[e._v("集中修改样式")]),o("li",[e._v("将元素设置为display：none，脱离文档流")]),o("li",[e._v("使用BFC，不影响其他元素位置")]),o("li",[e._v("使用节流或者防抖")]),o("li",[e._v("使用createDocumentFragment批量操作DOM")]),o("li",[e._v("使用CSS3和requestAnimationFrame,利用自身的优化机制")])])]),o("hr"),o("h2",[e._v("第二种思路回答")]),o("ul",[o("li",[e._v("网络请求")])]),o("blockquote",[o("p",[e._v("DNS解析、TCP连接、HTTP请求")])]),o("ul",[o("li",[e._v("解析")])]),o("blockquote",[o("p",[e._v("解析HTML报文，遇到css、js、图片等静态资源继续使用http请求,网络请求过程中会进行缓存判断；")]),o("p",[e._v("将数据进行结构化，构建DOM树、CSS规则，生成Render Tree")])]),o("ul",[o("li",[e._v("渲染")])]),o("blockquote",[o("p",[e._v("layout、composite")])])])])])}],u={},h=Object(c["a"])(u,p,i,!1,null,null,null),d=h.exports,m=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},f=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[o("code",{pre:!0},[e._v("<script>")]),e._v("中defer和async的区别？")]),o("p",[e._v("编辑日期：2022.3.28")]),o("p",[o("img",{attrs:{src:"https://image-static.segmentfault.com/28/4a/284aec5bb7f16b3ef4e7482110c5ddbb_fix732",alt:"解析图片"}})]),o("ul",[o("li",[e._v("defer延迟执行，async异步")]),o("li",[e._v("无defer、async时，遇到js时，html暂停解析，下载js执行js")]),o("li",[e._v("有defer时，js下载与html解析并行进行，js执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。")]),o("li",[e._v("有async时，js下载与html解析并行进行，js下载完毕即执行，会暂停解析html")]),o("li",[e._v("defer能够保证js文件的执行顺序，async不行")]),o("li",[e._v("js动态添加的 script 标签隐含 async 属性")])])])])])}],b={},g=Object(c["a"])(b,m,f,!1,null,null,null),T=g.exports,j=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},C=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h2",[e._v("1. HTTPS")]),o("ul",[o("li",[e._v("1.客户端向客户端发送https请求；")]),o("li",[e._v("2.客户端将非对称加密密钥对中的公钥发送给客户端；")]),o("li",[e._v("3.客户端向第三方机构验证包含公钥信息的数字证书的合法性，如果认证通过则生成一个随机数（后续作为客户端密钥使用），用服务端公钥对这个随机数进行加密；")]),o("li",[e._v("4.客户端发送第二次http请求，将这个加密的随机数发送服务器；")]),o("li",[e._v("5.服务器通过非对称加密中的密钥对上述报文进行解密，得到随机数；")]),o("li",[e._v("6.服务器使用解密获得的随机数对需要响应的报文进行对称加密，并传输给客户端；")]),o("li",[e._v("7.客户端获得响应报文后，使用自己的随机数作为密钥进行解密")])]),o("p",[e._v("总的来说https包含了两次http传输过程，使用了非对称加密和对称加密；非对称加密主要用于处理对称加密需要使用的密钥；")])])])])}],k={},S=Object(c["a"])(k,j,C,!1,null,null,null),y=S.exports,P=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},w=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[e._v("Javascript")]),o("blockquote",[o("p",[e._v("编辑日期：2022.4.2")])]),o("h2",[e._v("1. typeof 判断变量类型")]),o("ul",[o("li",[o("code",{pre:!0},[e._v("typeof")]),e._v(" 无法判断null 返回的是object,这是javascript的历史遗留bug，由于涉及到的东西太多，不好进行修复")])]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" {log}="),o("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("console")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v(" "),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("foo")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v("){}\n\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),o("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("null")]),e._v(")  "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//object")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),o("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("undefined")]),e._v(") "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//undefined")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),o("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("1")]),e._v(") "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//number")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),o("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'123'")]),e._v(") "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//string")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),o("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("false")]),e._v(") "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//boolean")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" {}) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//object")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" []) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//object")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" foo) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//function")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" abc) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//undefined  abc无需声明")]),e._v("\n")])]),o("hr"),o("h2",[e._v("2.如何进行准确的js内置数据类型判断？")]),o("ul",[o("li",[o("code",{pre:!0},[e._v("Object.prototype.toString.call()")])])]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" {log}="),o("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("console")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" {toString}="),o("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Object")]),e._v("."),o("span",{pre:!0,attrs:{class:"hljs-property"}},[o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("prototype")])]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" abc\n"),o("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v(" "),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("foo")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v("){}\n\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("null")]),e._v(")) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Null]")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("undefined")]),e._v(")) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Undefined]")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("(abc)) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Undefined]  abc需要声明不然报错")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("false")]),e._v(")) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Bollean]")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("123")]),e._v(")) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Number]")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),o("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'boo'")]),e._v(")) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object String]")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("({})) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Object]")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("([])) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Array]")]),e._v("\n"),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),o("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("(foo)) "),o("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Function]")]),e._v("\n")])]),o("hr"),o("h2",[e._v("3.数据类型")]),o("blockquote",[o("p",[e._v("八种数据类型")])]),o("ul",[o("li",[e._v("null")]),o("li",[e._v("undefined")]),o("li",[e._v("number")]),o("li",[e._v("string")]),o("li",[e._v("boolean")]),o("li",[e._v("object")]),o("li",[e._v("symbol")]),o("li",[e._v("bigint")])]),o("blockquote",[o("p",[e._v("为什么由bigint")])]),o("p",[e._v("JavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。")]),o("blockquote",[o("p",[e._v("基本类型")])]),o("ul",[o("li",[e._v("Undefined、Null、Boolean、Number、String")])]),o("p",[e._v("存储在栈中，占据空间小，使用频繁")]),o("blockquote",[o("p",[e._v("引用类型")])]),o("ul",[o("li",[e._v("object")])]),o("p",[e._v("存储在堆中，占据空间大，大小不固定，在栈中存储指针，指针指向堆的实体起始位置；")]),o("blockquote",[o("p",[e._v("堆、栈特点")])]),o("p",[e._v("在操作系统中，栈内存由编译器自动分配释放，存储函数的参数值、局部变量值等，其操作方式类似数据结构中的栈；")]),o("p",[e._v("堆区内存由开发者分配释放，若开发者不释放，程序结束时会被垃圾回收机制进行回收；")]),o("hr"),o("h2",[e._v("4. 如何判断变量是否时数组")]),o("ul",[o("li",[e._v("Object.prototype.toString.call(obj)")]),o("li",[e._v("Array.isarray(obj)")]),o("li",[e._v("原型链判断，"),o("code",{pre:!0},[e._v("obj.__proto__")]),e._v(" === "),o("code",{pre:!0},[e._v("Array.prototype")])]),o("li",[e._v("obj instanceof Array")]),o("li",[e._v("Array.prototype.isPrototypeOf(obj)")])]),o("hr"),o("h2",[e._v("5. "),o("code",{pre:!0},[e._v("0.1+0.2")]),e._v(" != "),o("code",{pre:!0},[e._v("0.3")]),e._v("的问题")]),o("p",[e._v("js中数字的存储方式，为64位固定长度；")]),o("p",[e._v("计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是"),o("code",{pre:!0},[e._v("0.0001100110011001100...")]),e._v("（1100循环），0.2的二进制是："),o("code",{pre:!0},[e._v("0.00110011001100...")]),e._v("（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？")]),o("p",[e._v("在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。")]),o("p",[o("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/JS/%20number-store.png",alt:"浮点数存储"}})]),o("ul",[o("li",[e._v("第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位")]),o("li",[e._v("第二部分（绿色）：用来存储指数（exponent），占用11位")]),o("li",[e._v("第三部分（红色）：用来存储小数（fraction），占用52位")])]),o("p",[e._v("指数区域（绿色部分）的正负数处理，使用一个固定偏移量解决1023")]),o("blockquote",[o("p",[e._v("js能够表示的最大整数为正负2的53次方")]),o("p",[e._v("参考资源 http://www.jsphp.net/js-jichu-basic/show-7-169-1.html")])]),o("hr"),o("h2",[e._v("6. ==的比较规则")]),o("p",[o("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/JS/compare.png",alt:"==比较流程"}})]),o("ul",[o("li",[e._v("首先会判断两者类型是否相同,相同的话就比较两者的大小；")]),o("li",[e._v("类型不相同的话，就会进行类型转换；")]),o("li",[e._v("会先判断是否在对比 null 和 undefined，是的话就会返回 true")]),o("li",[e._v("判断两者类型是否为 string 和 number，是的话就会将字符串转换为 number")]),o("li",[e._v("判断其中一方是否为 boolean，是的话就会把 boolean 转为 number 再进行判断")]),o("li",[e._v("判断其中一方是否为 object 且另一方为 string、number 或者 symbol，是的话就会把 object 转为原始类型再进行判断")])]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[o("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'1'")]),e._v(" == { "),o("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v("name")]),e._v(": "),o("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'js'")]),e._v(" }      "),o("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'1'")]),e._v(" == "),o("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'[object Object]'")]),e._v("\n")])]),o("hr"),o("h2",[e._v("7. let、const、var的比较")]),o("p",[o("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/JS/let-var-const.png",alt:"声明变量方式比较"}})]),o("hr"),o("h2",[e._v("8.new操作符的原理")]),o("ul",[o("li",[e._v("创建一个对象")]),o("li",[e._v("将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）")]),o("li",[e._v("指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）")]),o("li",[e._v("返回新的对象")])]),o("p",[e._v("箭头函数没有自己的prototype，也没有自己的this指向，因此不能对箭头函数进行new操作")]),o("hr"),o("h2",[e._v("9. Proxy作用")]),o("p",[e._v("在 Vue3.0 中通过 Proxy 来替换原本的 Object.defineProperty 来实现数据响应式。")]),o("p",[e._v("Proxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。")]),o("p",[e._v("如果需要实现一个 Vue 中的响应式，需要在 get 中收集依赖，在 set 派发更新，之所以 Vue3.0 要使用 Proxy 替换原本的 API 原因在于 Proxy 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是 Proxy 可以完美监听到任何方式的数据改变。")]),o("blockquote",[o("p",[e._v("缺点:兼容性问题")])])])])])}],H={},O=Object(c["a"])(H,P,w,!1,null,null,null),q=O.exports,A=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},E=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[e._v("简单请求和复杂请求（CORS实现）")]),o("blockquote",[o("p",[e._v("编辑日期：2022.3.29")]),o("p",[e._v("参考文献：http://www.ruanyifeng.com/blog/2016/04/cors.html")])]),o("hr"),o("blockquote",[o("p",[e._v("CORS可以分为以下两种：")])]),o("ul",[o("li",[e._v("简单请求（simple request）")]),o("li",[e._v("复杂请求（not-so-simple request")])]),o("hr"),o("h2",[e._v("1.简单请求")]),o("blockquote",[o("p",[e._v("简单请求")])]),o("p",[e._v("需要同时满足以下两大条件：")]),o("blockquote",[o("p",[e._v("1、请求方法是以下三种方法之一： HEAD GET POST")])]),o("blockquote",[o("p",[e._v("2、HTTP的头信息不超出以下几种字段： Accept、 Accept-Language、 Content-Language、 Last-Event-ID、 Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain")])]),o("p",[e._v("这个设计是为了兼容表单，历史上表单一直可以发出跨域请求。AJAX的跨域设计是，只要表单可以发，AJAX就可以直接发。")]),o("p",[e._v("不同时满足上述两个条件的请求均为复杂请求；")]),o("blockquote",[o("p",[e._v("请求过程")])]),o("p",[e._v("简单请求发出时会自动添加"),o("code",{pre:!0},[e._v("Origin")]),e._v("字段")]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[e._v("GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])]),o("p",[e._v("如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。")]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":""}},[e._v("Access-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n")])]),o("p",[e._v("上面的头信息之中，有三个与CORS请求相关的字段，都以"),o("code",{pre:!0},[e._v("Access-Control-")]),e._v("开头。")]),o("ul",[o("li",[e._v("Access-Control-Allow-Origin")])]),o("p",[e._v("该字段是必须的。它的值要么是请求时"),o("code",{pre:!0},[e._v("Origin")]),e._v("字段的值，要么是一个"),o("code",{pre:!0},[e._v("*")]),e._v("，表示接受任意域名的请求。")]),o("ul",[o("li",[e._v("Access-Control-Allow-Credentials")])]),o("p",[e._v("该字段可选。它的值是一个布尔值，表示是否允许发送"),o("code",{pre:!0},[e._v("Cookie")]),e._v("。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。")]),o("p",[e._v("需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的"),o("code",{pre:!0},[e._v("document.cookie")]),e._v("也无法读取服务器域名下的Cookie。")]),o("ul",[o("li",[e._v("Access-Control-Expose-Headers")])]),o("p",[e._v("该字段可选。与XMLHttpRequest对象的getResponseHeader()方法相关")]),o("hr"),o("h2",[e._v("2.复杂请求")]),o("p",[e._v("非简单请求是那种对服务器有特殊要求的请求，比如请求方法是"),o("code",{pre:!0},[e._v("PUT")]),e._v("或"),o("code",{pre:!0},[e._v("DELETE")]),e._v("，或者"),o("code",{pre:!0},[e._v("Content-Type")]),e._v("字段的类型是"),o("code",{pre:!0},[e._v("application/json")]),e._v("。")]),o("p",[e._v("非简单请求的"),o("code",{pre:!0},[e._v("CORS")]),e._v("在正式通信前，会发起一次HTTP查询请求，成为‘预检’请求（preflight）")]),o("p",[e._v("这次预请求的目的是向服务器验证正式请求是否被允许，会讲正式请求的请求方法、头部信息字段传递给服务器进行验证；")]),o("p",[e._v('"预检"请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。')]),o("blockquote",[o("p",[e._v("OPTIONS请求")])]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":""}},[e._v("\nOPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n\n")])]),o("p",[e._v("除了"),o("code",{pre:!0},[e._v("Origin")]),e._v('字段，"预检"请求的头信息包括两个特殊字段。')]),o("ul",[o("li",[e._v("Access-Control-Request-Method")]),o("li",[e._v("Access-Control-Request-Headers")])]),o("blockquote",[o("p",[e._v("服务器回应")])]),o("p",[e._v("服务器检查上述相关字段后，如果允许跨域请求会进行响应")]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":""}},[e._v("HTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n")])]),o("p",[e._v("如果服务器响应不包含CORS相关头信息字段，浏览器会判定服务器不同意预检请求，因此会触发一个错误，被XHR的onerror回调函数捕获，在控制台打印如下信息：")]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":""}},[e._v("XMLHttpRequest cannot load http://api.alice.com.\nOrigin http://api.bob.com is not allowed by Access-Control-Allow-Origin.\n")])]),o("p",[e._v("服务器回应的CORS字段如下：")]),o("pre",{pre:!0},[o("code",{pre:!0,attrs:{"v-pre":""}},[e._v("Access-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000 //本次预请求有效期，可缓存，在此期间，无需发出第二条预请求\n")])]),o("blockquote",[o("p",[e._v("预请求通过")])]),o("p",[e._v("通过预请求后与简单请求没有区别，都会有一个"),o("code",{pre:!0},[e._v("Origin")]),e._v("头信息，响应字段中有"),o("code",{pre:!0},[e._v("Access-Control-Allow-Origin")]),e._v("信息")]),o("hr"),o("h2",[e._v("3. CORS与JSONP相比")]),o("p",[e._v("CORS与JSONP的使用目的相同，但是比JSONP更强大。")]),o("p",[e._v("JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。")]),o("hr"),o("h2",[e._v("4.OPTIONS请求方法的主要用途")]),o("ul",[o("li",[e._v("获取服务器支持的所有HTTP请求方法；")]),o("li",[e._v("用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。")])])])])])}],M={},x=Object(c["a"])(M,A,E,!1,null,null,null),D=x.exports,R=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},N=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[e._v("HTML基础知识（一）")]),o("blockquote",[o("p",[e._v("编辑日期：2022.03.29")]),o("p",[e._v("参考文献：https://juejin.cn/post/6905294475539513352#heading-20")])]),o("hr"),o("h2",[e._v("1. iframe的优缺点")]),o("blockquote",[o("p",[e._v("优点")])]),o("ul",[o("li",[e._v("可以加载比较慢的内容（如广告）")]),o("li",[e._v("可以并行加载js")]),o("li",[e._v("可以实现跨子域通信")])]),o("blockquote",[o("p",[e._v("缺点")])]),o("ul",[o("li",[e._v("不利于SEO")]),o("li",[e._v("iframe页面会阻塞主页面的onload事件")]),o("li",[e._v("会产生很多页面，不利于管理")])]),o("hr"),o("h2",[e._v("2. Canvas和SVG的区别")]),o("blockquote",[o("p",[e._v("SVG (scalable vector graphics)")])]),o("p",[e._v("是基于XML的2D图形语言，SVG的DOM元素可以被js操作")]),o("blockquote",[o("p",[e._v("特点")])]),o("ul",[o("li",[e._v("不依赖分辨率")]),o("li",[e._v("支持事件处理器")]),o("li",[e._v("最适合带有大型渲染区域的应用程序（比如谷歌地图）")]),o("li",[e._v("复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）")]),o("li",[e._v("不适合游戏应用")])]),o("blockquote",[o("p",[e._v("Canvas")])]),o("p",[e._v("通过js绘制2D图形，是逐像素进行渲染，位置发生变化就会重新渲染")]),o("blockquote",[o("p",[e._v("特点")])]),o("ul",[o("li",[e._v("依赖分辨率")]),o("li",[e._v("不支持事件处理器")]),o("li",[e._v("弱的文本渲染能力")]),o("li",[e._v("能够以 .png 或 .jpg 格式保存结果图像")]),o("li",[e._v("最适合图像密集型的游戏，其中的许多对象会被频繁重绘")])])])])])}],L={},G=Object(c["a"])(L,R,N,!1,null,null,null),U=G.exports,F=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},z=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[e._v("HTTP协议（一）")]),o("blockquote",[o("p",[e._v("编辑日期：2022.3.30")]),o("p",[e._v("参考文献：https://juejin.cn/post/6908327746473033741#heading-2")]),o("p",[e._v("https://www.zhihu.com/question/28586791")]),o("p",[e._v("https://developer.mozilla.org/zh-CN/docs/Glossary/safe")]),o("p",[e._v("https://developer.mozilla.org/zh-CN/docs/Glossary/Idempotent")])]),o("hr"),o("h2",[e._v("1.GET和POST请求的区别")]),o("ul",[o("li",[o("code",{pre:!0},[e._v("缓存")]),e._v("：浏览器一般会对get请求进行缓存，很少对post请求进行请求，post一般对数据有副作用；")]),o("li",[o("code",{pre:!0},[e._v("发送报文的的格式")]),e._v("：Get请求中的报文实体部分为空，post请求中报文的实体部分一般为向服务器发送的数据；")]),o("li",[o("code",{pre:!0},[e._v("安全性")]),e._v("：get将请求参数放在url中，post请求参数放在报文实体中，get相对安全性较差;")]),o("li",[o("code",{pre:!0},[e._v("请求长度")]),e._v("：不同浏览器、服务器对url的长度限制不同，导致get请求的发送数据长度有限；")]),o("li",[o("code",{pre:!0},[e._v("参数类型")]),e._v("：post的参数传递支持更多的数据类型；get只支持url编码，post请求支持多种编码方式；")]),o("li",[o("code",{pre:!0},[e._v("TCP数据包的数量")]),e._v("：存在使用post请求时会发送两个TCP数据包，先发送header到服务器进行验证，验证通过后再发送data;")])]),o("p",[e._v("tips:实际上post、get本质上都是进行请求传输，只不过是由于服务端和客户端的一些约定导致其中的差异。")]),o("hr"),o("h2",[e._v("2.幂等（Idempotent）、安全（Safe）")]),o("p",[e._v("一个HTTP方法是幂等的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。")]),o("p",[e._v("换句话说就是，幂等方法不应该具有副作用（统计用途除外）。")]),o("p",[e._v("幂等性只与后端服务器的实际状态有关，而每一次请求接收到的状态码不一定相同。例如，第一次调用 DELETE 方法有可能返回 200 ，但是后续的请求可能会返回 404 。")]),o("p",[e._v("如果说一个 HTTP 方法是安全的，是指这是个不会修改服务器的数据的方法。也就是说，这是一个对服务器只读操作的方法。这些方法是安全的：GET，HEAD 和 OPTIONS。")]),o("hr"),o("h2",[e._v("3.HTTP请求方法")]),o("ul",[o("li",[o("code",{pre:!0},[e._v("GET")]),e._v("：用于请求指定资源，用于数据获取，幂等无副作用；")]),o("li",[o("code",{pre:!0},[e._v("POST")]),e._v("：发送数据给服务器，不是幂等的；")]),o("li",[o("code",{pre:!0},[e._v("OPTIONS")]),e._v("：用于获取目的资源所支持的通信选项，如获取服务器支持的请求方法、CORS的预请求；")]),o("li",[o("code",{pre:!0},[e._v("PUT")]),e._v("：用于在请求中创建或替换目标资源，PUT是幂等的；")]),o("li",[o("code",{pre:!0},[e._v("HEAD")]),e._v("：请求头部信息，一般用于请求较大的文件资源时；")]),o("li",[o("code",{pre:!0},[e._v("DELETE")]),e._v("：用于删除指定的资源；")]),o("li",[o("code",{pre:!0},[e._v("PATCH")]),e._v("：用于对资源进行部分修改；")]),o("li",[o("code",{pre:!0},[e._v("TRACE")]),e._v("：路径消息环回测试、回显服务器收到的请求，主要⽤于测试或诊断；")]),o("li",[o("code",{pre:!0},[e._v("CONNECT")]),e._v("：开启客户端与服务器请求资源的双向沟通通道；")])]),o("hr"),o("h2",[e._v("4.常见的HTP请求头和响应头")]),o("blockquote",[o("p",[e._v("通用共有 Header")])]),o("ul",[o("li",[o("code",{pre:!0},[e._v("Connection")]),e._v(":决定该次请求后是否关闭网络请求，keep-alive,close；")]),o("li",[o("code",{pre:!0},[e._v("Content-Type")]),e._v("：用于指示资源的MIME类型 media type,常见的属性值有以下四种："),o("code",{pre:!0},[e._v("application/x-www-form-urlencoded")]),e._v("、"),o("code",{pre:!0},[e._v("multipart/form-data")]),e._v("、"),o("code",{pre:!0},[e._v("application/json")]),e._v("、"),o("code",{pre:!0},[e._v("text/xml")]),e._v("；")])]),o("blockquote",[o("p",[e._v("HTTP Request Header")])]),o("ul",[o("li",[o("code",{pre:!0},[e._v("Accept")]),e._v(":浏览器希望处理的内容类型；")]),o("li",[o("code",{pre:!0},[e._v("Cookie")]),e._v(":健值对形式向服务器传输数据；")]),o("li",[o("code",{pre:!0},[e._v("Host")]),e._v(":表明请求需要发送到的服务器主机名和端口号；")]),o("li",[o("code",{pre:!0},[e._v("Origin")]),e._v(":表示了请求来自于哪个站点，浏览器会将Origin添加到所有的跨域请求、除开GET和HEAD外的同源请求中；")]),o("li",[o("code",{pre:!0},[e._v("Referer")]),e._v(":当前请求页面的来源页面的地址；")]),o("li",[o("code",{pre:!0},[e._v("User-Agent")]),e._v("：用户代理软件的信息标记")])]),o("blockquote",[o("p",[e._v("HTTP Response Header")])]),o("ul",[o("li",[o("code",{pre:!0},[e._v("Date")]),e._v(":包含了报文创建的日期和时间；")]),o("li",[o("code",{pre:!0},[e._v("Server")]),e._v(":服务器名称；")]),o("li",[o("code",{pre:!0},[e._v("Cache-Control")]),e._v("：控制HTTP缓存；")])]),o("hr"),o("h2",[e._v("5.HTTP1.1和HTTP2.0的区别")]),o("blockquote",[o("p",[e._v("HTTP2.0")])]),o("ul",[o("li",[e._v("二进制协议")]),o("li",[e._v("多路复用")]),o("li",[e._v("数据流")]),o("li",[e._v("头部信息压缩")]),o("li",[e._v("服务器推送")])]),o("hr"),o("h2",[e._v("6.对keep-alive的理解")]),o("p",[o("code",{pre:!0},[e._v("Keep-Alive")]),e._v("功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，"),o("code",{pre:!0},[e._v("Keep-Alive")]),e._v("功能避免了建立或者重新建立连接，这就是长连接; 使用方法：")]),o("ul",[o("li",[e._v("HTTP1.0版本是默认没有Keep-alive的（也就是默认会发送keep-alive），所以要想连接得到保持，必须手动配置发送Connection: keep-alive字段。若想断开keep-alive连接，需发送Connection:close字段；")]),o("li",[e._v("HTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送Connection：close首部字段。")])]),o("blockquote",[o("p",[e._v("缺点")])]),o("ul",[o("li",[e._v("长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。")])]),o("hr"),o("h2",[e._v("7.HTTP和HTTPS协议的区别")]),o("ul",[o("li",[e._v("HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；")]),o("li",[e._v("HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议;")]),o("li",[e._v("使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；")]),o("li",[e._v("TTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。")])]),o("hr"),o("h2",[e._v("8. TCP、UDP区别")]),o("p",[o("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/HTTP/tcp-udp-diff.png",alt:"区别"}})])])])])}],I={},B=Object(c["a"])(I,F,z,!1,null,null,null),J=B.exports,$=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},V=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[e._v("浏览器原理")]),o("blockquote",[o("p",[e._v("编辑日期：2022.3.30")]),o("p",[e._v("参考文献：https://juejin.cn/post/6916157109906341902/")])]),o("hr"),o("h2",[e._v("1. XSS (cross site scripting) 跨站脚本攻击")]),o("p",[e._v("是一种代码注入攻击，通过向网站注入恶意脚本，使之在浏览器上运行，从而获取用户信息如cookie、dom、localStorage等；")]),o("p",[e._v("通过脚本攻击可以进行如下操作：")]),o("ul",[o("li",[e._v("获取用户信息")]),o("li",[e._v("DOS（Denial of Server）攻击,占用服务器资源，从而导致用户无法访问服务器")]),o("li",[e._v("破坏页面结构")]),o("li",[e._v("流量劫持（将链接指向某网站）")])]),o("blockquote",[o("p",[e._v("分类：存储型、反射型、DOM型")])]),o("blockquote",[o("p",[e._v("防范：")])]),o("ul",[o("li",[e._v("不使用服务端渲染，对插入的HTML代码进行转义处理；")]),o("li",[e._v("使用CSP（Content-Security-Policy）建立白名单，告诉浏览器哪些外部资源可以进行下载执行；")]),o("li",[e._v("保护敏感细腻型，比如 "),o("code",{pre:!0},[e._v("cookie")]),e._v(" 使用 "),o("code",{pre:!0},[e._v("http-only")]),e._v("，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。")])]),o("hr"),o("h2",[e._v("2.CSRF (Cross Site Request Forgery)跨站点请求伪造")]),o("p",[e._v("攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。")]),o("p",[e._v("CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。")]),o("blockquote",[o("p",[e._v("攻击类型")])]),o("ul",[o("li",[e._v("GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。")]),o("li",[e._v("POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。")]),o("li",[e._v("链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。")])]),o("blockquote",[o("p",[e._v("防范：")])]),o("ul",[o("li",[e._v("服务器进行同源检查，检查请求头Origin、Referer信息；")]),o("li",[e._v("增加token验证")]),o("li",[e._v("cookie设置samesite属性")])]),o("hr"),o("h2",[e._v("3.网络劫持")]),o("blockquote",[o("p",[e._v("分类")])]),o("ul",[o("li",[e._v("DNS劫持")])]),o("p",[e._v("DNS强制解析: 通过修改运营商的本地DNS记录，来引导⽤户流量到缓存服务器")]),o("p",[e._v("302跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302跳转的回复，引导⽤户获取内容")]),o("ul",[o("li",[e._v("HTTP劫持")])]),o("p",[e._v("HTTP劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的http响应内容(即加⼴告)")]),o("blockquote",[o("p",[e._v("防范：")]),o("p",[e._v("DNS劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。")])])])])])}],X={},Z=Object(c["a"])(X,$,V,!1,null,null,null),K=Z.exports,W=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},Y=[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("section",[o("html",[o("head"),o("body",[o("h1",[e._v("页面性能优化")]),o("blockquote",[o("p",[e._v("编辑日期：2022.4.1")]),o("p",[e._v("参考文献：https://juejin.cn/post/6941278592215515143#heading-1")])]),o("hr"),o("h2",[e._v("1. CDN")]),o("p",[e._v("content delivery network，内容分发网络，通过互联技术将最靠近用户的服务器向用户响应请求资源，提高传输速度，降低成本；")]),o("p",[e._v("CDN作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。")]),o("blockquote",[o("p",[e._v("组成")])]),o("ul",[o("li",[e._v("分发服务系统")])]),o("p",[e._v("基本工作单元为cache设备，负责直接响应最终用户的需求，同时负责同步更新源站点的资源。")]),o("ul",[o("li",[e._v("负载均衡系统")])]),o("p",[e._v("负责对所有发起服务请求的用户进行调度；")]),o("ul",[o("li",[e._v("运营管理系统")])]),o("p",[e._v("负责处理业务层面的与外界系统交互所必须的收集、整理、交付工作")]),o("blockquote",[o("p",[e._v("作用")])]),o("ul",[o("li",[e._v("性能方面：用户响应速度提高，降低服务器负载")]),o("li",[e._v("安全方面：有助于防御DDOS（分布式拒绝服务攻击），监控分析异常流量，限制其访问频率；针对MIMS（Man-in-the-MiddleAttack，中间人攻击)，使用全链路 HTTPS 通信")])]),o("blockquote",[o("p",[e._v("原理")])]),o("p",[e._v("与DNS过程密不可分")]),o("p",[e._v("利用CDN专用DNS服务器在中间进行URl响应 "),o("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/HTTP/cdn.png",alt:"CDN响应过程"}})]),o("blockquote",[o("p",[e._v("使用场景")])]),o("ul",[o("li",[e._v("前端静态资源缓存")]),o("li",[e._v("直播流媒体推送，直播流媒体不会像静态资源逐层寻找，而是采用主动推送的方式进行；")])]),o("hr"),o("h2",[e._v("2.懒加载")]),o("p",[e._v("懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。")]),o("p",[e._v("能够提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力")]),o("blockquote",[o("p",[e._v("特点")])]),o("ul",[o("li",[e._v("减少无用资源加载")]),o("li",[e._v("提升用户体验")]),o("li",[e._v("防止过多图片加载影响其他文件加载")])]),o("blockquote",[o("p",[e._v("图片懒加载实现原理")])]),o("p",[e._v("利用元素的data-xxx自定义属性存储真正的图片src，当图片处于窗口可视位置时，使用js取出属性值赋给src进行加载；")]),o("blockquote",[o("p",[e._v("懒加载与预加载的区别")])]),o("ul",[o("li",[e._v("懒加载是延迟或者不加载，在用户需要的时候再进行访问；")]),o("li",[e._v("预加载是将可能需要访问的资源提前缓存再本地，待需要的时候直接从缓存获取响应；")])]),o("hr"),o("h2",[e._v("3. 使用webpack进行前端优化")]),o("ul",[o("li",[o("code",{pre:!0},[e._v("压缩代码")]),e._v("：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩css")]),o("li",[o("code",{pre:!0},[e._v("利⽤CDN加速")]),e._v(": 在构建过程中，将引⽤的静态资源路径修改为CDN上对应的路径。可以利⽤webpack对于 output 参数和各loader的 publicPath 参数来修改资源路径")]),o("li",[o("code",{pre:!0},[e._v("Tree Shaking")]),e._v(": 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动webpack时追加参数 --optimize-minimize 来实现")]),o("li",[o("code",{pre:!0},[e._v("Code Splitting")]),e._v(": 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存")]),o("li",[o("code",{pre:!0},[e._v("提取公共第三⽅库")]),e._v(": SplitChunksPlugin插件来进⾏公共模块抽取,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码")])]),o("blockquote",[o("p",[e._v("如何提高webpack的构建速度")])]),o("ul",[o("li",[e._v("多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码")]),o("li",[e._v("通过 externals 配置来提取常⽤库")]),o("li",[e._v("利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引⽤但是绝对不会修改的npm包来进⾏预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。")]),o("li",[e._v("使⽤ Happypack 实现多线程加速编译")]),o("li",[e._v("使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度")]),o("li",[e._v("使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码")])])])])])}],Q={},ee=Object(c["a"])(Q,W,Y,!1,null,null,null),te=ee.exports,oe={name:"Home",components:{BrowserCache:v,ParseUrl:d,DeferAndAsync:T,HttpsProtocol:y,JS01:q,SimpleRequest:D,HTML01:U,HTTPBasic:J,BrowserTheory:K,BrowserOptimize:te},props:{},data:function(){return{currentView:"BrowserCache",notesMap:[{code:"browser-cache",component:"BrowserCache"},{code:"ParseUrl",component:"ParseUrl"},{code:"DeferAndAsync",component:"DeferAndAsync"},{code:"JS01",component:"JS01"},{code:"HttpsProtocol",component:"HttpsProtocol"},{code:"SimpleRequest",component:"SimpleRequest"},{code:"html-basic",component:"HTML01"},{code:"http",component:"HTTPBasic"},{code:"BrowserTheory",component:"BrowserTheory"},{code:"BrowserOptimize",component:"BrowserOptimize"}]}},watch:{$route:{handler:function(e){var t=e.params.articleName,o=this.notesMap.filter((function(e){return e.code===t}));o&&o.length>0&&(this.currentView=o[0].component)},deep:!0}},computed:{},mounted:function(){var e=this.$route.params,t=e.articleName,o=this.notesMap.filter((function(e){return e.code===t}));this.currentView=o[0].component},methods:{}},re=oe,le=(o("922a"),Object(c["a"])(re,r,l,!1,null,null,null));t["default"]=le.exports}}]);
//# sourceMappingURL=chunk-781fa144.dc24efb1.js.map