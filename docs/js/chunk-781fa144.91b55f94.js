(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-781fa144"],{"0b42":function(e,s,t){var r=t("da84"),l=t("e8b5"),a=t("68ee"),o=t("861d"),n=t("b622"),_=n("species"),v=r.Array;e.exports=function(e){var s;return l(e)&&(s=e.constructor,a(s)&&(s===v||l(s.prototype))?s=void 0:o(s)&&(s=s[_],null===s&&(s=void 0))),void 0===s?v:s}},"1dde":function(e,s,t){var r=t("d039"),l=t("b622"),a=t("2d00"),o=l("species");e.exports=function(e){return a>=51||!r((function(){var s=[],t=s.constructor={};return t[o]=function(){return{foo:1}},1!==s[e](Boolean).foo}))}},"4de4":function(e,s,t){"use strict";var r=t("23e7"),l=t("b727").filter,a=t("1dde"),o=a("filter");r({target:"Array",proto:!0,forced:!o},{filter:function(e){return l(this,e,arguments.length>1?arguments[1]:void 0)}})},"4fa3":function(e,s,t){},"65f0":function(e,s,t){var r=t("0b42");e.exports=function(e,s){return new(r(e))(0===s?0:s)}},"922a":function(e,s,t){"use strict";t("4fa3")},b727:function(e,s,t){var r=t("0366"),l=t("e330"),a=t("44ad"),o=t("7b0b"),n=t("07fa"),_=t("65f0"),v=l([].push),p=function(e){var s=1==e,t=2==e,l=3==e,p=4==e,c=6==e,i=7==e,h=5==e||c;return function(u,d,m,j){for(var f,b,g=o(u),y=a(g),k=r(d,m),T=n(y),S=0,w=j||_,C=s?w(u,T):t||i?w(u,0):void 0;T>S;S++)if((h||S in y)&&(f=y[S],b=k(f,S,g),e))if(s)C[S]=b;else if(b)switch(e){case 3:return!0;case 5:return f;case 6:return S;case 2:v(C,f)}else switch(e){case 4:return!1;case 7:v(C,f)}return c?-1:l||p?p:C}};e.exports={forEach:p(0),map:p(1),filter:p(2),some:p(3),every:p(4),find:p(5),findIndex:p(6),filterReject:p(7)}},e8b5:function(e,s,t){var r=t("c6b6");e.exports=Array.isArray||function(e){return"Array"==r(e)}},ead7:function(e,s,t){"use strict";t.r(s);var r=function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("div",{staticClass:"markdown-body"},[t(e.currentView,{tag:"component"})],1)},l=[],a=(t("4de4"),t("d3b7"),function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)}),o=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("HTTP缓存")]),t("blockquote",[t("p",[e._v("编辑日期:2022.3.28")])]),t("blockquote",[t("p",[e._v("参考文献")]),t("p",[e._v("https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control")]),t("p",[e._v("https://blog.csdn.net/jiangshangchunjiezi/article/details/104488266")])]),t("h2",[e._v("1.为什么使用缓存")]),t("ul",[t("li",[e._v("减少延迟")]),t("li",[e._v("减少网络通信")]),t("li",[e._v("增强网站响应性")])]),t("hr"),t("h2",[e._v("2.Cache-Control")]),t("p",[t("code",{pre:!0},[e._v("Cache-Control")]),e._v("是浏览器缓存的控制开关，不设置的则会重新向服务器发起请求；")]),t("p",[t("code",{pre:!0},[e._v("Cache-Control")]),e._v("是通用的消息头字段，其指令是单向的，在请求头中的"),t("code",{pre:!0},[e._v("Cache-Control")]),e._v("不一定包含在响应头中")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[e._v('accept-ranges: bytes\naccess-control-allow-origin: *\nage: 75617\ncache-control: max-age=31536000\ncontent-encoding: br\ncontent-md5: qEixiiEsURBAE2zakMuWhg==\ncontent-type: text/javascript; charset=utf-8\ndate: Sun, 27 Mar 2022 03:36:45 GMT\netag: "a848b18a212c511040136cda90cb9686"\nexpires: Tue, 29 Mar 2022 06:36:28 GMT\nlast-modified: Thu, 17 Mar 2022 08:23:27 GMT\nohc-cache-hit: jn7un52 [2]\nohc-file-size: 617427\nserver: JSP3/2.0.14\ntiming-allow-origin: *\nx-bce-content-crc32: 3171064980\nx-bce-debug-id: 6nzJkohMEqwAdOz3SUUley/u9NMny0t9vcSu4tv9cbAc/BK+iqjrnY4UOuzgjSFml7kLIoVioeUGk8RYgsDrHQ==\nx-bce-request-id: fde4f928-13ca-4600-83cf-ee8d9ec97ff8\nx-bce-storage-class: STANDARD\n')])]),t("p",[e._v("客户端在HTTP请求中可以使用的"),t("code",{pre:!0},[e._v("Cache-Control")]),e._v("指令")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[e._v("Cache-Control: max-age=<seconds>\nCache-Control: max-stale[=<seconds>]\nCache-Control: min-fresh=<seconds>\nCache-control: no-cache\nCache-control: no-store\nCache-control: no-transform\nCache-control: only-if-cached\n")])]),t("p",[e._v("服务器在HTTP请求中可以使用的"),t("code",{pre:!0},[e._v("Cache-Control")]),e._v("指令")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[e._v("Cache-control: must-revalidate\nCache-control: no-cache\nCache-control: no-store\nCache-control: no-transform\nCache-control: public\nCache-control: private\nCache-control: proxy-revalidate\nCache-Control: max-age=<seconds>\nCache-control: s-maxage=<seconds>\n")])]),t("blockquote",[t("p",[t("code",{pre:!0},[e._v("public")]),e._v(" 表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存，即使是通常不可缓存的内容。（例如：1.该响应没有max-age指令或Expires消息头；2. 该响应对应的请求方法是 POST 。）")])]),t("blockquote",[t("p",[t("code",{pre:!0},[e._v("private")]),e._v(" 表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。私有缓存可以缓存响应内容，比如：对应用户的本地浏览器。")])]),t("blockquote",[t("p",[t("code",{pre:!0},[e._v("no-cache")]),e._v(" 在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证(协商缓存验证)。")])]),t("blockquote",[t("p",[t("code",{pre:!0},[e._v("no-store")]),e._v(" 缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存。")])]),t("blockquote",[t("p",[t("code",{pre:!0},[e._v("max-age=<seconds>")]),e._v(" 设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与Expires相反，时间是相对于请求的时间。若在此时间内发起请求，会用缓存；若超时，则会向服务端发请求。")])]),t("hr"),t("h2",[e._v("3.Expires")]),t("p",[t("code",{pre:!0},[e._v("Expires")]),e._v(" 响应头包含日期/时间， 即在此时候之后，响应过期。")]),t("p",[e._v("如果在"),t("code",{pre:!0},[e._v("Cache-Control")]),e._v("响应头设置了 "),t("code",{pre:!0},[e._v("max-age")]),e._v(" 或者 "),t("code",{pre:!0},[e._v("s-max-age")]),e._v(" 指令，那么 "),t("code",{pre:!0},[e._v("Expires")]),e._v(" 头会被忽略。")]),t("hr"),t("h2",[e._v("4.协商缓存")]),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200224232616448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW5nc2hhbmdjaHVuamllemk=,size_16,color_FFFFFF,t_70",alt:"协商缓存过程"}})]),t("blockquote",[t("p",[t("code",{pre:!0},[e._v("Etag")]),e._v("、"),t("code",{pre:!0},[e._v("If-None-Match")])]),t("blockquote",[t("p",[e._v("浏览器第一次向服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上ETag字段；")]),t("p",[e._v("浏览器再次跟服务器请求这个资源时，在request的header上加上If-None-Match，这个值就是上一次请求时返回的ETag的值；")]),t("p",[e._v("服务器再次收到资源请求时，再根据资源生成一个新的ETag，与浏览器传过来If-None-Match比较，如果这两个值相同，则说明资源没有变化，返回304 Not Modified, 浏览器从缓存中加载资源，否则返回200 资源内容。与Last-Modified不一样的是，当服务器返回304 Not Modified的响应时，由于ETag重新生成过，response header中还会把这个ETag返回，即使这个ETag跟之前的没有变化")])])]),t("blockquote",[t("p",[t("code",{pre:!0},[e._v("Last-Modified")]),e._v("、"),t("code",{pre:!0},[e._v("If-Modified-Since")])]),t("blockquote",[t("p",[e._v("浏览器第一次向服务器请求一个资源，服务器在返回这个资源的同时，在respone的header加上Last-Modified字段，表示该资源在服务器上的最后修改时间；")]),t("p",[e._v("浏览器再次向服务器请求这个资源时，在request的header上加上If-Modified-Since字段，这个值就是上一次请求时返回的Last-Modified的值;")]),t("p",[e._v("服务器收到资源请求时，比较If-Modified-Since字段值和被请求资源的最后修改时间，若资源最后修改时间较旧，则说明文件没有修改，返回304 Not Modified, 浏览器从缓存中加载资源；若不相同，说明文件被更新，浏览器直接从服务器加载资源, 返回200；")]),t("p",[e._v("重新加载资源时更新Last-Modified Header")])])]),t("hr"),t("blockquote",[t("p",[e._v("为什么有了"),t("code",{pre:!0},[e._v("Last-Modified")]),e._v("，还需要使用"),t("code",{pre:!0},[e._v("Etag")]),e._v("？")])]),t("p",[e._v("一些文件可能被修改过，但是其内容并未变化，这时候我们不希望客户端认为文件进行了改变，而重新请求")]),t("ul",[t("li",[e._v("部分文件修改频繁，1s内多次修改，而"),t("code",{pre:!0},[e._v("If-Modified-Since")]),e._v("只能检查的粒度为s")]),t("li",[e._v("某些服务器不能精确的得到文件的最后修改时间。 对于上述情景，利用"),t("code",{pre:!0},[e._v("ETag")]),e._v("能够更加准确的控制缓存，因为ETag是服务器自动生成的资源在服务器端的唯一标识符，资源每次变动，都会生成新的ETag值。"),t("code",{pre:!0},[e._v("Last-Modified")]),e._v("与"),t("code",{pre:!0},[e._v("ETag")]),e._v("是可以一起使用的，但服务器会"),t("code",{pre:!0},[e._v("优先验证ETag")]),e._v("。")])]),t("hr"),t("h2",[e._v("5.响应中Age与Date")]),t("blockquote",[t("p",[t("code",{pre:!0},[e._v("Date")]),e._v(" 原服务器第一次响应的时间")]),t("p",[t("code",{pre:!0},[e._v("Age")]),e._v(" 表示中间环节(CDN或缓存服务器)从服务器拿到数据之后的时间。如果是客户端看到是0秒，代表是从服务器拿到的最新的数据。")])]),t("hr"),t("h2",[e._v("6.浏览器缓存位置")]),t("blockquote",[t("p",[e._v("从高到低排序")])]),t("ul",[t("li",[t("code",{pre:!0},[e._v("Service Worker")])])]),t("p",[e._v("Service worker是一个注册在指定源和路径下的事件驱动worker。它采用JavaScript控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。你可以完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("Memory Cache")])])]),t("p",[e._v("Memory Cache 就是内存缓存，它的"),t("code",{pre:!0},[e._v("效率最快")]),e._v("，但缓存"),t("code",{pre:!0},[e._v("持续性很短")]),e._v("，会"),t("code",{pre:!0},[e._v("随着进程的释放而释放")]),e._v("。一旦我们关闭 Tab 页面，内存中的缓存也就被释放了。")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("Disk Cache")])])]),t("p",[e._v("Disk Cache 也就是存储在硬盘中的缓存，"),t("code",{pre:!0},[e._v("读取速度慢点")]),e._v("，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上。在所有浏览器缓存中，Disk Cache "),t("code",{pre:!0},[e._v("覆盖面基本是最大的")]),e._v("。它会根据 HTTP Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，"),t("code",{pre:!0},[e._v("相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据")]),e._v("。")])])])])}],n=t("2877"),_={},v=Object(n["a"])(_,a,o,!1,null,null,null),p=v.exports,c=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},i=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("浏览器输入Url会发生什么？")]),t("p",[e._v("编辑日期：2022.3.28")]),t("blockquote",[t("p",[e._v("参考链接")]),t("p",[e._v("https://www.jianshu.com/p/7eea6fbc5fcd")])]),t("blockquote",[t("p",[e._v("详细过程")])]),t("ul",[t("li",[e._v("1.判断当前url的缓存内容是否可用,决定是否向服务器请求资源")]),t("li",[e._v("2.DNS解析，寻找域名映射的IP地址")]),t("li",[e._v("3.浏览器与服务器通过三次握手建立TCP连接")]),t("li",[e._v("4.浏览器向服务器发送HTTP请求")]),t("li",[e._v("5.浏览器接收服务器的HTTP响应报文")]),t("li",[e._v("6.浏览器进行页面渲染")]),t("li",[e._v("7.通过四次挥手关闭TCP连接")])]),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/20200417223938321.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0NDX1RvZ2V0aGVy,size_16,color_FFFFFF,t_70",alt:"浏览器页面渲染"}})]),t("blockquote",[t("p",[e._v("1.解析HTML生成DOM树；")]),t("p",[e._v("2.解析CSS生成CSS规则；")]),t("p",[e._v("3.合并DOM树和渲染规则生成渲染树render Tree")]),t("p",[e._v("4.对渲染树进行布局计算，对页面元素进行位置布局计算")]),t("p",[e._v("5.绘制render树")]),t("p",[e._v("6.浏览器将各层的信息发送给GPU,由进行图层的合成，并展示在屏幕上；")])]),t("p",[e._v("浏览器在未收到完成的HTML文件时，就进行了页面的渲染，在遇到外部的脚本标签或者样式时，就会重新发送http请求重复上述过程，在这之中可能会发生页面的回流或者重绘；")]),t("hr"),t("h2",[e._v("重绘和重排（回流）")]),t("blockquote"),t("p",[e._v("Reflow和Repaint，回流也称之为Layout,一般意味着页面的内容、结构、位置尺寸发生了变化，需要重新计数和渲染树；")]),t("p",[e._v("Repaint意味着页面的改变只是影响到页面的一些元素外观之类的")]),t("p",[e._v("显然，回流的成本要高于重绘，DOM树中节点的reflow很可能导致与其相关节点的reflow")]),t("blockquote",[t("p",[e._v("减少重排的方法:")]),t("ul",[t("li",[e._v("集中修改样式")]),t("li",[e._v("将元素设置为display：none，脱离文档流")]),t("li",[e._v("使用BFC，不影响其他元素位置")]),t("li",[e._v("使用节流或者防抖")]),t("li",[e._v("使用createDocumentFragment批量操作DOM")]),t("li",[e._v("使用CSS3和requestAnimationFrame,利用自身的优化机制")])])]),t("hr"),t("h2",[e._v("第二种思路回答")]),t("ul",[t("li",[e._v("网络请求")])]),t("blockquote",[t("p",[e._v("DNS解析、TCP连接、HTTP请求")])]),t("ul",[t("li",[e._v("解析")])]),t("blockquote",[t("p",[e._v("解析HTML报文，遇到css、js、图片等静态资源继续使用http请求,网络请求过程中会进行缓存判断；")]),t("p",[e._v("将数据进行结构化，构建DOM树、CSS规则，生成Render Tree")])]),t("ul",[t("li",[e._v("渲染")])]),t("blockquote",[t("p",[e._v("layout、composite")])])])])])}],h={},u=Object(n["a"])(h,c,i,!1,null,null,null),d=u.exports,m=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},j=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[t("code",{pre:!0},[e._v("<script>")]),e._v("中defer和async的区别？")]),t("p",[e._v("编辑日期：2022.3.28")]),t("p",[t("img",{attrs:{src:"https://image-static.segmentfault.com/28/4a/284aec5bb7f16b3ef4e7482110c5ddbb_fix732",alt:"解析图片"}})]),t("ul",[t("li",[e._v("defer延迟执行，async异步")]),t("li",[e._v("无defer、async时，遇到js时，html暂停解析，下载js执行js")]),t("li",[e._v("有defer时，js下载与html解析并行进行，js执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。")]),t("li",[e._v("有async时，js下载与html解析并行进行，js下载完毕即执行，会暂停解析html")]),t("li",[e._v("defer能够保证js文件的执行顺序，async不行")]),t("li",[e._v("js动态添加的 script 标签隐含 async 属性")])])])])])}],f={},b=Object(n["a"])(f,m,j,!1,null,null,null),g=b.exports,y=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},k=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h2",[e._v("1. HTTPS")]),t("ul",[t("li",[e._v("1.客户端向客户端发送https请求；")]),t("li",[e._v("2.服务端将非对称加密密钥对中的公钥发送给客户端；")]),t("li",[e._v("3.客户端向第三方机构验证包含公钥信息的数字证书的合法性，如果认证通过则生成一个随机数（后续作为客户端密钥使用），用服务端公钥对这个随机数进行加密；")]),t("li",[e._v("4.客户端发送第二次http请求，将这个加密的随机数发送服务器；")]),t("li",[e._v("5.服务器通过非对称加密中的密钥对上述报文进行解密，得到随机数；")]),t("li",[e._v("6.服务器使用解密获得的随机数对需要响应的报文进行对称加密，并传输给客户端；")]),t("li",[e._v("7.客户端获得响应报文后，使用自己的随机数作为密钥进行解密")])]),t("p",[e._v("总的来说https包含了两次http传输过程，使用了非对称加密和对称加密；非对称加密主要用于处理对称加密需要使用的密钥；")])])])])}],T={},S=Object(n["a"])(T,y,k,!1,null,null,null),w=S.exports,C=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},P=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("Javascript")]),t("blockquote",[t("p",[e._v("编辑日期：2022.4.2")])]),t("h2",[e._v("1. typeof 判断变量类型")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("typeof")]),e._v(" 无法判断null 返回的是object,这是javascript的历史遗留bug，由于涉及到的东西太多，不好进行修复")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" {log}="),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("console")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("foo")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v("){}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("null")]),e._v(")  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//object")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("undefined")]),e._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//undefined")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("1")]),e._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//number")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'123'")]),e._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//string")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("false")]),e._v(") "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//boolean")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" {}) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//object")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" []) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//object")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" foo) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//function")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("typeof")]),e._v(" abc) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//undefined  abc无需声明")]),e._v("\n")])]),t("hr"),t("h2",[e._v("2.如何进行准确的js内置数据类型判断？")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("Object.prototype.toString.call()")])])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-javascript"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" {log}="),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("console")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" {toString}="),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Object")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("prototype")])]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" abc\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("foo")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v("){}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("null")]),e._v(")) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Null]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("undefined")]),e._v(")) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Undefined]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("(abc)) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Undefined]  abc需要声明不然报错")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("false")]),e._v(")) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Bollean]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("123")]),e._v(")) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Number]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'boo'")]),e._v(")) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object String]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("({})) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Object]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("([])) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Array]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(toString."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("call")]),e._v("(foo)) "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//[object Function]")]),e._v("\n")])]),t("hr"),t("h2",[e._v("3.数据类型")]),t("blockquote",[t("p",[e._v("八种数据类型")])]),t("ul",[t("li",[e._v("null")]),t("li",[e._v("undefined")]),t("li",[e._v("number")]),t("li",[e._v("string")]),t("li",[e._v("boolean")]),t("li",[e._v("object")]),t("li",[e._v("symbol")]),t("li",[e._v("bigint")])]),t("blockquote",[t("p",[e._v("为什么由bigint")])]),t("p",[e._v("JavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。")]),t("blockquote",[t("p",[e._v("基本类型")])]),t("ul",[t("li",[e._v("Undefined、Null、Boolean、Number、String")])]),t("p",[e._v("存储在栈中，占据空间小，使用频繁")]),t("blockquote",[t("p",[e._v("引用类型")])]),t("ul",[t("li",[e._v("object")])]),t("p",[e._v("存储在堆中，占据空间大，大小不固定，在栈中存储指针，指针指向堆的实体起始位置；")]),t("blockquote",[t("p",[e._v("堆、栈特点")])]),t("p",[e._v("在操作系统中，栈内存由编译器自动分配释放，存储函数的参数值、局部变量值等，其操作方式类似数据结构中的栈；")]),t("p",[e._v("堆区内存由开发者分配释放，若开发者不释放，程序结束时会被垃圾回收机制进行回收；")]),t("hr"),t("h2",[e._v("4. 如何判断变量是否时数组")]),t("ul",[t("li",[e._v("Object.prototype.toString.call(obj)")]),t("li",[e._v("Array.isarray(obj)")]),t("li",[e._v("原型链判断，"),t("code",{pre:!0},[e._v("obj.__proto__")]),e._v(" === "),t("code",{pre:!0},[e._v("Array.prototype")])]),t("li",[e._v("obj instanceof Array")]),t("li",[e._v("Array.prototype.isPrototypeOf(obj)")])]),t("hr"),t("h2",[e._v("5. "),t("code",{pre:!0},[e._v("0.1+0.2")]),e._v(" != "),t("code",{pre:!0},[e._v("0.3")]),e._v("的问题")]),t("p",[e._v("js中数字的存储方式，为64位固定长度；")]),t("p",[e._v("计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是"),t("code",{pre:!0},[e._v("0.0001100110011001100...")]),e._v("（1100循环），0.2的二进制是："),t("code",{pre:!0},[e._v("0.00110011001100...")]),e._v("（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？")]),t("p",[e._v("在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。")]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/JS/%20number-store.png",alt:"浮点数存储"}})]),t("ul",[t("li",[e._v("第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位")]),t("li",[e._v("第二部分（绿色）：用来存储指数（exponent），占用11位")]),t("li",[e._v("第三部分（红色）：用来存储小数（fraction），占用52位")])]),t("p",[e._v("指数区域（绿色部分）的正负数处理，使用一个固定偏移量解决1023")]),t("blockquote",[t("p",[e._v("js能够表示的最大整数为正负2的53次方")]),t("p",[e._v("参考资源 http://www.jsphp.net/js-jichu-basic/show-7-169-1.html")])]),t("hr"),t("h2",[e._v("6. ==的比较规则")]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/JS/compare.png",alt:"==比较流程"}})]),t("ul",[t("li",[e._v("首先会判断两者类型是否相同,相同的话就比较两者的大小；")]),t("li",[e._v("类型不相同的话，就会进行类型转换；")]),t("li",[e._v("会先判断是否在对比 null 和 undefined，是的话就会返回 true")]),t("li",[e._v("判断两者类型是否为 string 和 number，是的话就会将字符串转换为 number")]),t("li",[e._v("判断其中一方是否为 boolean，是的话就会把 boolean 转为 number 再进行判断")]),t("li",[e._v("判断其中一方是否为 object 且另一方为 string、number 或者 symbol，是的话就会把 object 转为原始类型再进行判断")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'1'")]),e._v(" == { "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v("name")]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'js'")]),e._v(" }      "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'1'")]),e._v(" == "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'[object Object]'")]),e._v("\n")])]),t("hr"),t("h2",[e._v("7. let、const、var的比较")]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/JS/let-var-const.png",alt:"声明变量方式比较"}})]),t("hr"),t("h2",[e._v("8.new操作符的原理")]),t("ul",[t("li",[e._v("创建一个对象")]),t("li",[e._v("将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）")]),t("li",[e._v("指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）")]),t("li",[e._v("返回新的对象")])]),t("p",[e._v("箭头函数没有自己的prototype，也没有自己的this指向，因此不能对箭头函数进行new操作")]),t("hr"),t("h2",[e._v("9. Proxy作用")]),t("p",[e._v("在 Vue3.0 中通过 Proxy 来替换原本的 Object.defineProperty 来实现数据响应式。")]),t("p",[e._v("Proxy 是 ES6 中新增的功能，它可以用来自定义对象中的操作。")]),t("p",[e._v("如果需要实现一个 Vue 中的响应式，需要在 get 中收集依赖，在 set 派发更新，之所以 Vue3.0 要使用 Proxy 替换原本的 API 原因在于 Proxy 无需一层层递归为每个属性添加代理，一次即可完成以上操作，性能上更好，并且原本的实现有一些数据更新不能监听到，但是 Proxy 可以完美监听到任何方式的数据改变。")]),t("blockquote",[t("p",[e._v("缺点:兼容性问题")])]),t("hr"),t("h2",[e._v("10.this的理解")]),t("p",[e._v("this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("函数调用模式")]),e._v("：当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。")]),t("li",[t("code",{pre:!0},[e._v("方法调用模式")]),e._v("：如果一个函数作为一个对象的方法来调用时，this 指向这个对象。")]),t("li",[t("code",{pre:!0},[e._v("构造器调用模式")]),e._v("：如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。")]),t("li",[t("code",{pre:!0},[e._v("apply 、 call 和 bind 调用模式")])])]),t("blockquote",[t("p",[e._v("优先级")])]),t("p",[e._v("构造函数调用 > apply 、 call 和 bind > 方法调用模式 > 函数调用模式")]),t("hr"),t("h2",[e._v("11. call()、apply()的区别")]),t("p",[e._v("作用都是改变this的指向，传参方式不同，")]),t("ul",[t("li",[e._v("call的第一个参数是函数this的指向，后面参数一个个传递，数量不定")]),t("li",[e._v("apply第一个参数也是this的指向，后面参数用数组或者类数组作为第二个参数")])]),t("hr"),t("h2",[e._v("12.异步编程")]),t("blockquote",[t("p",[e._v("异步编程的几种实现方式")])]),t("ul",[t("li",[t("code",{pre:!0},[e._v("回调函数")]),e._v("：代码耦合性高，容易造成嵌套炼狱；")]),t("li",[t("code",{pre:!0},[e._v("Promise")]),e._v(": 解决嵌套，但是可能使用多个then,语义不清晰；")]),t("li",[t("code",{pre:!0},[e._v("generator")]),e._v(": 将函数控制权转移")]),t("li",[t("code",{pre:!0},[e._v("async")]),e._v(": 是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。")])]),t("hr"),t("h2",[e._v("13. Promise的理解")]),t("blockquote",[t("p",[e._v("Promise的实例有三个状态:")])]),t("ul",[t("li",[e._v("Pending（进行中）")]),t("li",[e._v("Resolved（已完成）")]),t("li",[e._v("Rejected（已拒绝）")])]),t("blockquote",[t("p",[e._v("特点")])]),t("ul",[t("li",[e._v("对象的状态不受外界影响，只有三种状态")]),t("li",[e._v("状态一旦改变，就不会再变，任何时候都能得到这个结果")])]),t("blockquote",[t("p",[e._v("缺点")])]),t("ul",[t("li",[e._v("无法取消，一旦执行，中途无法取消；")]),t("li",[e._v("如果不设置回调函数，promise内部的错误，不会反应在外部；")]),t("li",[e._v("当处于pending状态时，无法得知promise是刚开始还是即将结束")])]),t("p",[e._v("Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。")]),t("p",[t("code",{pre:!0},[e._v("注意：")]),e._v(" 在构造 Promise 的时候，构造函数内部的代码是立即执行的")]),t("blockquote",[t("p",[e._v("promise使用")])]),t("p",[e._v("一般情况下都会使用new Promise()来创建promise对象，但是也可以使用promise.resolve和promise.reject这两个方法：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" promise = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Promise")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[e._v("resolve, reject")]),e._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// ... some code")]),e._v("\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("if")]),e._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("/* 异步操作成功 */")]),e._v("){\n    "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("resolve")]),e._v("(value);\n  } "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("else")]),e._v(" {\n    "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("reject")]),e._v("(error);\n  }\n});\n\n")])]),t("hr"),t("h2",[e._v("13.对象继承")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("原型链继承")]),e._v("：缺点是包含引用类型数据时，会被所有实例对象共享，容易造成修改的混乱，创建的子类型不能向超类型传递参数")]),t("li",[t("code",{pre:!0},[e._v("构造函数继承")]),e._v("：解决了子类型向超类型传值的问题，但是其方法无法复用，子类型无法访问到超类型的方法；")]),t("li",[t("code",{pre:!0},[e._v("组合继承")]),e._v("：借鉴上述原型链继承、构造函数继承的优点，使用构造函数实现子类型属性的继承，将子类型的原型设置为超类型的实例来实现方法的继承。缺点时调用了两次超类型的构造函数，造成了子类型原型中很多不必要的属性；")]),t("li",[t("code",{pre:!0},[e._v("原型式继承")]),e._v("：主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。")]),t("li",[t("code",{pre:!0},[e._v("寄生式继承")]),e._v("：寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。")]),t("li",[t("code",{pre:!0},[e._v("寄生式组合继承")]),e._v("：组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用"),t("code",{pre:!0},[e._v("超类型的原型的副本")]),e._v("来作为子类型的原型，这样就避免了创建不必要的属性。")])])])])])}],q={},E=Object(n["a"])(q,C,P,!1,null,null,null),O=E.exports,H=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},A=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("简单请求和复杂请求（CORS实现）")]),t("blockquote",[t("p",[e._v("编辑日期：2022.3.29")]),t("p",[e._v("参考文献：http://www.ruanyifeng.com/blog/2016/04/cors.html")])]),t("hr"),t("blockquote",[t("p",[e._v("CORS可以分为以下两种：")])]),t("ul",[t("li",[e._v("简单请求（simple request）")]),t("li",[e._v("复杂请求（not-so-simple request")])]),t("hr"),t("h2",[e._v("1.简单请求")]),t("blockquote",[t("p",[e._v("简单请求")])]),t("p",[e._v("需要同时满足以下两大条件：")]),t("blockquote",[t("p",[e._v("1、请求方法是以下三种方法之一： HEAD GET POST")])]),t("blockquote",[t("p",[e._v("2、HTTP的头信息不超出以下几种字段： Accept、 Accept-Language、 Content-Language、 Last-Event-ID、 Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain")])]),t("p",[e._v("这个设计是为了兼容表单，历史上表单一直可以发出跨域请求。AJAX的跨域设计是，只要表单可以发，AJAX就可以直接发。")]),t("p",[e._v("不同时满足上述两个条件的请求均为复杂请求；")]),t("blockquote",[t("p",[e._v("请求过程")])]),t("p",[e._v("简单请求发出时会自动添加"),t("code",{pre:!0},[e._v("Origin")]),e._v("字段")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-text"}},[e._v("GET /cors HTTP/1.1\nOrigin: http://api.bob.com\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n")])]),t("p",[e._v("如果Origin指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[e._v("Access-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: FooBar\nContent-Type: text/html; charset=utf-8\n")])]),t("p",[e._v("上面的头信息之中，有三个与CORS请求相关的字段，都以"),t("code",{pre:!0},[e._v("Access-Control-")]),e._v("开头。")]),t("ul",[t("li",[e._v("Access-Control-Allow-Origin")])]),t("p",[e._v("该字段是必须的。它的值要么是请求时"),t("code",{pre:!0},[e._v("Origin")]),e._v("字段的值，要么是一个"),t("code",{pre:!0},[e._v("*")]),e._v("，表示接受任意域名的请求。")]),t("ul",[t("li",[e._v("Access-Control-Allow-Credentials")])]),t("p",[e._v("该字段可选。它的值是一个布尔值，表示是否允许发送"),t("code",{pre:!0},[e._v("Cookie")]),e._v("。默认情况下，Cookie不包括在CORS请求之中。设为true，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为true，如果服务器不要浏览器发送Cookie，删除该字段即可。")]),t("p",[e._v("需要注意的是，如果要发送Cookie，Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的"),t("code",{pre:!0},[e._v("document.cookie")]),e._v("也无法读取服务器域名下的Cookie。")]),t("ul",[t("li",[e._v("Access-Control-Expose-Headers")])]),t("p",[e._v("该字段可选。与XMLHttpRequest对象的getResponseHeader()方法相关")]),t("hr"),t("h2",[e._v("2.复杂请求")]),t("p",[e._v("非简单请求是那种对服务器有特殊要求的请求，比如请求方法是"),t("code",{pre:!0},[e._v("PUT")]),e._v("或"),t("code",{pre:!0},[e._v("DELETE")]),e._v("，或者"),t("code",{pre:!0},[e._v("Content-Type")]),e._v("字段的类型是"),t("code",{pre:!0},[e._v("application/json")]),e._v("。")]),t("p",[e._v("非简单请求的"),t("code",{pre:!0},[e._v("CORS")]),e._v("在正式通信前，会发起一次HTTP查询请求，成为‘预检’请求（preflight）")]),t("p",[e._v("这次预请求的目的是向服务器验证正式请求是否被允许，会讲正式请求的请求方法、头部信息字段传递给服务器进行验证；")]),t("p",[e._v('"预检"请求用的请求方法是OPTIONS，表示这个请求是用来询问的。头信息里面，关键字段是Origin，表示请求来自哪个源。')]),t("blockquote",[t("p",[e._v("OPTIONS请求")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[e._v("\nOPTIONS /cors HTTP/1.1\nOrigin: http://api.bob.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Custom-Header\nHost: api.alice.com\nAccept-Language: en-US\nConnection: keep-alive\nUser-Agent: Mozilla/5.0...\n\n")])]),t("p",[e._v("除了"),t("code",{pre:!0},[e._v("Origin")]),e._v('字段，"预检"请求的头信息包括两个特殊字段。')]),t("ul",[t("li",[e._v("Access-Control-Request-Method")]),t("li",[e._v("Access-Control-Request-Headers")])]),t("blockquote",[t("p",[e._v("服务器回应")])]),t("p",[e._v("服务器检查上述相关字段后，如果允许跨域请求会进行响应")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[e._v("HTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://api.bob.com\nAccess-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nContent-Type: text/html; charset=utf-8\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n")])]),t("p",[e._v("如果服务器响应不包含CORS相关头信息字段，浏览器会判定服务器不同意预检请求，因此会触发一个错误，被XHR的onerror回调函数捕获，在控制台打印如下信息：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[e._v("XMLHttpRequest cannot load http://api.alice.com.\nOrigin http://api.bob.com is not allowed by Access-Control-Allow-Origin.\n")])]),t("p",[e._v("服务器回应的CORS字段如下：")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":""}},[e._v("Access-Control-Allow-Methods: GET, POST, PUT\nAccess-Control-Allow-Headers: X-Custom-Header\nAccess-Control-Allow-Credentials: true\nAccess-Control-Max-Age: 1728000 //本次预请求有效期，可缓存，在此期间，无需发出第二条预请求\n")])]),t("blockquote",[t("p",[e._v("预请求通过")])]),t("p",[e._v("通过预请求后与简单请求没有区别，都会有一个"),t("code",{pre:!0},[e._v("Origin")]),e._v("头信息，响应字段中有"),t("code",{pre:!0},[e._v("Access-Control-Allow-Origin")]),e._v("信息")]),t("hr"),t("h2",[e._v("3. CORS与JSONP相比")]),t("p",[e._v("CORS与JSONP的使用目的相同，但是比JSONP更强大。")]),t("p",[e._v("JSONP只支持GET请求，CORS支持所有类型的HTTP请求。JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。")]),t("hr"),t("h2",[e._v("4.OPTIONS请求方法的主要用途")]),t("ul",[t("li",[e._v("获取服务器支持的所有HTTP请求方法；")]),t("li",[e._v("用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。")])])])])])}],M={},x=Object(n["a"])(M,H,A,!1,null,null,null),D=x.exports,R=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},N=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("HTML基础知识（一）")]),t("blockquote",[t("p",[e._v("编辑日期：2022.03.29")]),t("p",[e._v("参考文献：https://juejin.cn/post/6905294475539513352#heading-20")])]),t("hr"),t("h2",[e._v("1. iframe的优缺点")]),t("blockquote",[t("p",[e._v("优点")])]),t("ul",[t("li",[e._v("可以加载比较慢的内容（如广告）")]),t("li",[e._v("可以并行加载js")]),t("li",[e._v("可以实现跨子域通信")])]),t("blockquote",[t("p",[e._v("缺点")])]),t("ul",[t("li",[e._v("不利于SEO")]),t("li",[e._v("iframe页面会阻塞主页面的onload事件")]),t("li",[e._v("会产生很多页面，不利于管理")])]),t("hr"),t("h2",[e._v("2. Canvas和SVG的区别")]),t("blockquote",[t("p",[e._v("SVG (scalable vector graphics)")])]),t("p",[e._v("是基于XML的2D图形语言，SVG的DOM元素可以被js操作")]),t("blockquote",[t("p",[e._v("特点")])]),t("ul",[t("li",[e._v("不依赖分辨率")]),t("li",[e._v("支持事件处理器")]),t("li",[e._v("最适合带有大型渲染区域的应用程序（比如谷歌地图）")]),t("li",[e._v("复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）")]),t("li",[e._v("不适合游戏应用")])]),t("blockquote",[t("p",[e._v("Canvas")])]),t("p",[e._v("通过js绘制2D图形，是逐像素进行渲染，位置发生变化就会重新渲染")]),t("blockquote",[t("p",[e._v("特点")])]),t("ul",[t("li",[e._v("依赖分辨率")]),t("li",[e._v("不支持事件处理器")]),t("li",[e._v("弱的文本渲染能力")]),t("li",[e._v("能够以 .png 或 .jpg 格式保存结果图像")]),t("li",[e._v("最适合图像密集型的游戏，其中的许多对象会被频繁重绘")])])])])])}],L={},G=Object(n["a"])(L,R,N,!1,null,null,null),I=G.exports,J=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},F=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("HTTP协议（一）")]),t("blockquote",[t("p",[e._v("编辑日期：2022.3.30")]),t("p",[e._v("参考文献：https://juejin.cn/post/6908327746473033741#heading-2")]),t("p",[e._v("https://www.zhihu.com/question/28586791")]),t("p",[e._v("https://developer.mozilla.org/zh-CN/docs/Glossary/safe")]),t("p",[e._v("https://developer.mozilla.org/zh-CN/docs/Glossary/Idempotent")])]),t("hr"),t("h2",[e._v("1.GET和POST请求的区别")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("缓存")]),e._v("：浏览器一般会对get请求进行缓存，很少对post请求进行请求，post一般对数据有副作用；")]),t("li",[t("code",{pre:!0},[e._v("发送报文的的格式")]),e._v("：Get请求中的报文实体部分为空，post请求中报文的实体部分一般为向服务器发送的数据；")]),t("li",[t("code",{pre:!0},[e._v("安全性")]),e._v("：get将请求参数放在url中，post请求参数放在报文实体中，get相对安全性较差;")]),t("li",[t("code",{pre:!0},[e._v("请求长度")]),e._v("：不同浏览器、服务器对url的长度限制不同，导致get请求的发送数据长度有限；")]),t("li",[t("code",{pre:!0},[e._v("参数类型")]),e._v("：post的参数传递支持更多的数据类型；get只支持url编码，post请求支持多种编码方式；")]),t("li",[t("code",{pre:!0},[e._v("TCP数据包的数量")]),e._v("：存在使用post请求时会发送两个TCP数据包，先发送header到服务器进行验证，验证通过后再发送data;")])]),t("p",[e._v("tips:实际上post、get本质上都是进行请求传输，只不过是由于服务端和客户端的一些约定导致其中的差异。")]),t("hr"),t("h2",[e._v("2.幂等（Idempotent）、安全（Safe）")]),t("p",[e._v("一个HTTP方法是幂等的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的。")]),t("p",[e._v("换句话说就是，幂等方法不应该具有副作用（统计用途除外）。")]),t("p",[e._v("幂等性只与后端服务器的实际状态有关，而每一次请求接收到的状态码不一定相同。例如，第一次调用 DELETE 方法有可能返回 200 ，但是后续的请求可能会返回 404 。")]),t("p",[e._v("如果说一个 HTTP 方法是安全的，是指这是个不会修改服务器的数据的方法。也就是说，这是一个对服务器只读操作的方法。这些方法是安全的：GET，HEAD 和 OPTIONS。")]),t("hr"),t("h2",[e._v("3.HTTP请求方法")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("GET")]),e._v("：用于请求指定资源，用于数据获取，幂等无副作用；")]),t("li",[t("code",{pre:!0},[e._v("POST")]),e._v("：发送数据给服务器，不是幂等的；")]),t("li",[t("code",{pre:!0},[e._v("OPTIONS")]),e._v("：用于获取目的资源所支持的通信选项，如获取服务器支持的请求方法、CORS的预请求；")]),t("li",[t("code",{pre:!0},[e._v("PUT")]),e._v("：用于在请求中创建或替换目标资源，PUT是幂等的；")]),t("li",[t("code",{pre:!0},[e._v("HEAD")]),e._v("：请求头部信息，一般用于请求较大的文件资源时；")]),t("li",[t("code",{pre:!0},[e._v("DELETE")]),e._v("：用于删除指定的资源；")]),t("li",[t("code",{pre:!0},[e._v("PATCH")]),e._v("：用于对资源进行部分修改；")]),t("li",[t("code",{pre:!0},[e._v("TRACE")]),e._v("：路径消息环回测试、回显服务器收到的请求，主要⽤于测试或诊断；")]),t("li",[t("code",{pre:!0},[e._v("CONNECT")]),e._v("：开启客户端与服务器请求资源的双向沟通通道；")])]),t("hr"),t("h2",[e._v("4.常见的HTP请求头和响应头")]),t("blockquote",[t("p",[e._v("通用共有 Header")])]),t("ul",[t("li",[t("code",{pre:!0},[e._v("Connection")]),e._v(":决定该次请求后是否关闭网络请求，keep-alive,close；")]),t("li",[t("code",{pre:!0},[e._v("Content-Type")]),e._v("：用于指示资源的MIME类型 media type,常见的属性值有以下四种："),t("code",{pre:!0},[e._v("application/x-www-form-urlencoded")]),e._v("、"),t("code",{pre:!0},[e._v("multipart/form-data")]),e._v("、"),t("code",{pre:!0},[e._v("application/json")]),e._v("、"),t("code",{pre:!0},[e._v("text/xml")]),e._v("；")])]),t("blockquote",[t("p",[e._v("HTTP Request Header")])]),t("ul",[t("li",[t("code",{pre:!0},[e._v("Accept")]),e._v(":浏览器希望处理的内容类型；")]),t("li",[t("code",{pre:!0},[e._v("Cookie")]),e._v(":健值对形式向服务器传输数据；")]),t("li",[t("code",{pre:!0},[e._v("Host")]),e._v(":表明请求需要发送到的服务器主机名和端口号；")]),t("li",[t("code",{pre:!0},[e._v("Origin")]),e._v(":表示了请求来自于哪个站点，浏览器会将Origin添加到所有的跨域请求、除开GET和HEAD外的同源请求中；")]),t("li",[t("code",{pre:!0},[e._v("Referer")]),e._v(":当前请求页面的来源页面的地址；")]),t("li",[t("code",{pre:!0},[e._v("User-Agent")]),e._v("：用户代理软件的信息标记")])]),t("blockquote",[t("p",[e._v("HTTP Response Header")])]),t("ul",[t("li",[t("code",{pre:!0},[e._v("Date")]),e._v(":包含了报文创建的日期和时间；")]),t("li",[t("code",{pre:!0},[e._v("Server")]),e._v(":服务器名称；")]),t("li",[t("code",{pre:!0},[e._v("Cache-Control")]),e._v("：控制HTTP缓存；")])]),t("hr"),t("h2",[e._v("5.HTTP1.1和HTTP2.0的区别")]),t("blockquote",[t("p",[e._v("HTTP2.0")])]),t("ul",[t("li",[e._v("二进制协议")]),t("li",[e._v("多路复用")]),t("li",[e._v("数据流")]),t("li",[e._v("头部信息压缩")]),t("li",[e._v("服务器推送")])]),t("hr"),t("h2",[e._v("6.对keep-alive的理解")]),t("p",[t("code",{pre:!0},[e._v("Keep-Alive")]),e._v("功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，"),t("code",{pre:!0},[e._v("Keep-Alive")]),e._v("功能避免了建立或者重新建立连接，这就是长连接; 使用方法：")]),t("ul",[t("li",[e._v("HTTP1.0版本是默认没有Keep-alive的（也就是默认会发送keep-alive），所以要想连接得到保持，必须手动配置发送Connection: keep-alive字段。若想断开keep-alive连接，需发送Connection:close字段；")]),t("li",[e._v("HTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送Connection：close首部字段。")])]),t("blockquote",[t("p",[e._v("缺点")])]),t("ul",[t("li",[e._v("长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。")])]),t("hr"),t("h2",[e._v("7.HTTP和HTTPS协议的区别")]),t("ul",[t("li",[e._v("HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；")]),t("li",[e._v("HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议;")]),t("li",[e._v("使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；")]),t("li",[e._v("TTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。")])]),t("hr"),t("h2",[e._v("8. TCP、UDP区别")]),t("p",[t("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/HTTP/tcp-udp-diff.png",alt:"区别"}})])])])])}],z={},U=Object(n["a"])(z,J,F,!1,null,null,null),$=U.exports,B=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},V=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("浏览器原理")]),t("blockquote",[t("p",[e._v("编辑日期：2022.3.30")]),t("p",[e._v("参考文献：https://juejin.cn/post/6916157109906341902/")])]),t("hr"),t("h2",[e._v("1. XSS (cross site scripting) 跨站脚本攻击")]),t("p",[e._v("是一种代码注入攻击，通过向网站注入恶意脚本，使之在浏览器上运行，从而获取用户信息如cookie、dom、localStorage等；")]),t("p",[e._v("通过脚本攻击可以进行如下操作：")]),t("ul",[t("li",[e._v("获取用户信息")]),t("li",[e._v("DOS（Denial of Server）攻击,占用服务器资源，从而导致用户无法访问服务器")]),t("li",[e._v("破坏页面结构")]),t("li",[e._v("流量劫持（将链接指向某网站）")])]),t("blockquote",[t("p",[e._v("分类：存储型、反射型、DOM型")])]),t("blockquote",[t("p",[e._v("防范：")])]),t("ul",[t("li",[e._v("使用服务端渲染，对插入的HTML代码进行转义处理；")]),t("li",[e._v("使用CSP（Content-Security-Policy）建立白名单，告诉浏览器哪些外部资源可以进行下载执行； https://www.cnblogs.com/kinyoobi/p/15341248.html")]),t("li",[e._v("保护敏感细腻型，比如 "),t("code",{pre:!0},[e._v("cookie")]),e._v(" 使用 "),t("code",{pre:!0},[e._v("http-only")]),e._v("，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。")])]),t("hr"),t("h2",[e._v("2.CSRF (Cross Site Request Forgery)跨站点请求伪造")]),t("p",[e._v("攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。")]),t("p",[e._v("CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。")]),t("blockquote",[t("p",[e._v("攻击类型")])]),t("ul",[t("li",[e._v("GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。")]),t("li",[e._v("POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。")]),t("li",[e._v("链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。")])]),t("blockquote",[t("p",[e._v("防范：")])]),t("ul",[t("li",[e._v("服务器进行同源检查，检查请求头Origin、Referer信息；")]),t("li",[e._v("增加token验证")]),t("li",[e._v("cookie设置samesite属性")])]),t("hr"),t("h2",[e._v("3.网络劫持")]),t("blockquote",[t("p",[e._v("分类")])]),t("ul",[t("li",[e._v("DNS劫持")])]),t("p",[e._v("DNS强制解析: 通过修改运营商的本地DNS记录，来引导⽤户流量到缓存服务器")]),t("p",[e._v("302跳转的⽅式: 通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的,再对劫持的内存发起302跳转的回复，引导⽤户获取内容")]),t("ul",[t("li",[e._v("HTTP劫持")])]),t("p",[e._v("HTTP劫持: (访问⾕歌但是⼀直有贪玩蓝⽉的⼴告),由于http明⽂传输,运营商会修改你的http响应内容(即加⼴告)")]),t("blockquote",[t("p",[e._v("防范：")]),t("p",[e._v("DNS劫持由于涉嫌违法，已经被监管起来，现在很少会有DNS劫持，⽽http劫持依然⾮常盛⾏，最有效的办法就是全站HTTPS，将HTTP加密，这使得运营商⽆法获取明⽂，就⽆法劫持你的响应内容。")])]),t("hr"),t("h2",[e._v("4.垃圾回收")]),t("ul",[t("li",[e._v("引用计数（之前） 循环引用时会出现问题")]),t("li",[e._v("标记清除（现在）")])])])])])}],X={},Z=Object(n["a"])(X,B,V,!1,null,null,null),W=Z.exports,K=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},Y=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("页面性能优化")]),t("blockquote",[t("p",[e._v("编辑日期：2022.4.1")]),t("p",[e._v("参考文献：https://juejin.cn/post/6941278592215515143#heading-1")])]),t("hr"),t("h2",[e._v("1. CDN")]),t("p",[e._v("content delivery network，内容分发网络，通过互联技术将最靠近用户的服务器向用户响应请求资源，提高传输速度，降低成本；")]),t("p",[e._v("CDN作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。")]),t("blockquote",[t("p",[e._v("组成")])]),t("ul",[t("li",[e._v("分发服务系统")])]),t("p",[e._v("基本工作单元为cache设备，负责直接响应最终用户的需求，同时负责同步更新源站点的资源。")]),t("ul",[t("li",[e._v("负载均衡系统")])]),t("p",[e._v("负责对所有发起服务请求的用户进行调度；")]),t("ul",[t("li",[e._v("运营管理系统")])]),t("p",[e._v("负责处理业务层面的与外界系统交互所必须的收集、整理、交付工作")]),t("blockquote",[t("p",[e._v("作用")])]),t("ul",[t("li",[e._v("性能方面：用户响应速度提高，降低服务器负载")]),t("li",[e._v("安全方面：有助于防御DDOS（分布式拒绝服务攻击），监控分析异常流量，限制其访问频率；针对MIMS（Man-in-the-MiddleAttack，中间人攻击)，使用全链路 HTTPS 通信")])]),t("blockquote",[t("p",[e._v("原理")])]),t("p",[e._v("与DNS过程密不可分")]),t("p",[e._v("利用CDN专用DNS服务器在中间进行URl响应 "),t("img",{attrs:{src:"https://raw.githubusercontent.com/MoreCodeByTR/static-resources/master/imgs/HTTP/cdn.png",alt:"CDN响应过程"}})]),t("blockquote",[t("p",[e._v("使用场景")])]),t("ul",[t("li",[e._v("前端静态资源缓存")]),t("li",[e._v("直播流媒体推送，直播流媒体不会像静态资源逐层寻找，而是采用主动推送的方式进行；")])]),t("hr"),t("h2",[e._v("2.懒加载")]),t("p",[e._v("懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。")]),t("p",[e._v("能够提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力")]),t("blockquote",[t("p",[e._v("特点")])]),t("ul",[t("li",[e._v("减少无用资源加载")]),t("li",[e._v("提升用户体验")]),t("li",[e._v("防止过多图片加载影响其他文件加载")])]),t("blockquote",[t("p",[e._v("图片懒加载实现原理")])]),t("p",[e._v("利用元素的data-xxx自定义属性存储真正的图片src，当图片处于窗口可视位置时，使用js取出属性值赋给src进行加载；")]),t("blockquote",[t("p",[e._v("懒加载与预加载的区别")])]),t("ul",[t("li",[e._v("懒加载是延迟或者不加载，在用户需要的时候再进行访问；")]),t("li",[e._v("预加载是将可能需要访问的资源提前缓存再本地，待需要的时候直接从缓存获取响应；")])]),t("hr"),t("h2",[e._v("3. 使用webpack进行前端优化")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("压缩代码")]),e._v("：删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩JS⽂件， 利⽤ cssnano （css-loader?minimize）来压缩css")]),t("li",[t("code",{pre:!0},[e._v("利⽤CDN加速")]),e._v(": 在构建过程中，将引⽤的静态资源路径修改为CDN上对应的路径。可以利⽤webpack对于 output 参数和各loader的 publicPath 参数来修改资源路径")]),t("li",[t("code",{pre:!0},[e._v("Tree Shaking")]),e._v(": 将代码中永远不会⾛到的⽚段删除掉。可以通过在启动webpack时追加参数 --optimize-minimize 来实现")]),t("li",[t("code",{pre:!0},[e._v("Code Splitting")]),e._v(": 将代码按路由维度或者组件分块(chunk),这样做到按需加载,同时可以充分利⽤浏览器缓存")]),t("li",[t("code",{pre:!0},[e._v("提取公共第三⽅库")]),e._v(": SplitChunksPlugin插件来进⾏公共模块抽取,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码")])]),t("blockquote",[t("p",[e._v("如何提高webpack的构建速度")])]),t("ul",[t("li",[e._v("多⼊⼝情况下，使⽤ CommonsChunkPlugin 来提取公共代码")]),t("li",[e._v("通过 externals 配置来提取常⽤库")]),t("li",[e._v("利⽤ DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引⽤但是绝对不会修改的npm包来进⾏预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。")]),t("li",[e._v("使⽤ Happypack 实现多线程加速编译")]),t("li",[e._v("使⽤ webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度")]),t("li",[e._v("使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码")])]),t("hr"),t("h2",[e._v("4.垃圾回收")]),t("p",[e._v("JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。")]),t("blockquote",[t("p",[e._v("垃圾回收方法")])]),t("p",[e._v("标记清除，引用计数")]),t("blockquote",[t("p",[e._v("减少垃圾回收")])]),t("ul",[t("li",[t("code",{pre:!0},[e._v("对数组进行优化")]),e._v("： 在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。")]),t("li",[t("code",{pre:!0},[e._v("对object进行优化")]),e._v("： 对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。")]),t("li",[t("code",{pre:!0},[e._v("对函数进行优化")]),e._v("： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。")])]),t("blockquote",[t("p",[e._v("可能引起内存泄漏的方式")])]),t("ul",[t("li",[t("code",{pre:!0},[e._v("意外的全局变量")]),e._v("： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。")]),t("li",[t("code",{pre:!0},[e._v("被遗忘的计时器或回调函数")]),e._v("： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。")]),t("li",[t("code",{pre:!0},[e._v("脱离 DOM 的引用")]),e._v("： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。")]),t("li",[t("code",{pre:!0},[e._v("闭包")]),e._v("："),t("code",{pre:!0},[e._v("不合理的使用闭包")]),e._v("，从而导致某些变量一直被留在内存当中。")])])])])])}],Q={},ee=Object(n["a"])(Q,K,Y,!1,null,null,null),se=ee.exports,te=function(){var e=this,s=e.$createElement;e._self._c;return e._m(0)},re=[function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("section",[t("html",[t("head"),t("body",[t("h1",[e._v("ES6总结")]),t("blockquote",[t("p",[e._v("编辑日期：2022.4.21")]),t("p",[e._v("参考文献：https://es6.ruanyifeng.com/#docs/let")])]),t("hr"),t("h2",[e._v("1. let、const、var区别")]),t("blockquote",[t("p",[e._v("let、const")])]),t("ul",[t("li",[t("code",{pre:!0},[e._v("存在块级作用域")]),e._v(",块级作用域有暂时性死区，不能提前使用未声明变量")]),t("li",[t("code",{pre:!0},[e._v("不存在变量提升")]),e._v("，不允许声明前使用，否则会报错ReferenceError")]),t("li",[t("code",{pre:!0},[e._v("不允许")]),e._v("在相同作用域"),t("code",{pre:!0},[e._v("重复声明")]),e._v("变量")]),t("li",[e._v("let、const、class声明变量不属于顶层对象属性，var、function的全局变量会")])]),t("blockquote",[t("p",[e._v("块级作用域优势")])]),t("ul",[t("li",[e._v("解决条件、判断语句中var变量提升的问题")]),t("li",[e._v("替代匿名立即执行函数")]),t("li",[e._v("es6块级作用域需要有大括号包裹，否则报SyntaxError")])]),t("blockquote",[t("p",[e._v("const变量")])]),t("ul",[t("li",[e._v("const变量声明时必须初始化赋值，let不用")]),t("li",[e._v("const变量不可变，实际上是存入内存地址的数据不能改变，如果是值类型直接将值存入内存地址，如果是引用类型，则是存入的指针不能改变。至于所指向的引用对象，对象本身可以改变，增删属性都可以")]),t("li",[e._v("如果真的想将对象冻结，应该使用Object.freeze方法。")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Object")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("freeze")]),e._v("({});\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// 常规模式时，下面一行不起作用；")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// 严格模式时，该行会报错")]),e._v("\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("prop")]),e._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("123")]),e._v(";\n")])]),t("hr"),t("h2",[e._v("2.ES6声明变量的6种方式")]),t("ul",[t("li",[e._v("var")]),t("li",[e._v("function")]),t("li",[e._v("let")]),t("li",[e._v("const")]),t("li",[e._v("import")]),t("li",[e._v("class")])]),t("hr"),t("h2",[e._v("3.解构")]),t("p",[e._v("只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("fibs")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" a = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("0")]),e._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" b = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("1")]),e._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("while")]),e._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("true")]),e._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("yield")]),e._v(" a;\n    [a, b] = [b, a + b];\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" [first, second, third, fourth, fifth, sixth] = "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("fibs")]),e._v("();\nsixth "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// 5")]),e._v("\n")])]),t("blockquote",[t("p",[e._v("对象的解构")])]),t("p",[e._v("数组的解构赋值是按照顺序的，而对象的解构是按照属性名的")]),t("blockquote",[t("p",[e._v("解构的作用")])]),t("ul",[t("li",[e._v("交换变量值")]),t("li",[e._v("从函数返回多个值")]),t("li",[e._v("方便函数参数的定义")]),t("li",[e._v("提取JSON对象数据")]),t("li",[e._v("设置函数参数默认值")]),t("li",[e._v("遍历Map数据结构")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" map = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Map")]),e._v("();\nmap."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("set")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'first'")]),e._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'hello'")]),e._v(");\nmap."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("set")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'second'")]),e._v(", "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'world'")]),e._v(");\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("for")]),e._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" [key, value] "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("of")]),e._v(" map) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("console")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(key + "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('" is "')]),e._v(" + value);\n}\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// first is hello")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// second is world")]),e._v("\n")])]),t("ul",[t("li",[e._v("输入指定加载模块")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("const")]),e._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("SourceMapConsumer")]),e._v(", "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("SourceNode")]),e._v(" } = "),t("span",{pre:!0,attrs:{class:"hljs-built_in"}},[e._v("require")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"source-map"')]),e._v(");\n")])]),t("hr"),t("h2",[e._v("4.模版字符串")]),t("ul",[t("li",[e._v("可以进行模版字符串嵌套")])]),t("hr"),t("h2",[e._v("5.函数扩展")]),t("ul",[t("li",[e._v("能够设置参数默认值 缺点是function的length属性只会统计未被设置默认值的参数数量，因此length会失真")])]),t("p",[e._v("length属性不包含rest参数")]),t("blockquote",[t("p",[e._v("rest参数")])]),t("p",[e._v("arguments对象不是数组，而是一个类似数组的对象。所以为了使用数组的方法，es6之前必须使用Array.from先将其转为数组。rest 参数就不存在这个问题，它就是一个真正的数组，")]),t("p",[e._v("rest参数设置后，后面不能设置其他参数")]),t("hr"),t("h2",[e._v("6.箭头函数")]),t("ul",[t("li",[t("p",[e._v("（1）箭头函数没有自己的this对象（详见下文）。")])]),t("li",[t("p",[e._v("（2）不可以当作构造函数，也就是说，不可以对箭头函数使用new命令，否则会抛出一个错误。")])]),t("li",[t("p",[e._v("（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。")])]),t("li",[t("p",[e._v("（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。")])])]),t("hr"),t("h2",[e._v("7.尾调用优化（Tail call optimization）")]),t("p",[e._v("尾部调用的函数不依赖上一层函数， 即只保留内层函数的调用帧。如果所有函数都是尾调用，那么完全可以做到每次执行时，调用帧只有一项，这将大大节省内存。这就是“尾调用优化”的意义。")]),t("hr"),t("h2",[e._v("8.对象描述符")]),t("p",[e._v("目前，有四个操作会忽略enumerable为false的属性。")]),t("ul",[t("li",[e._v("for...in循环：只遍历对象自身的和继承的可枚举的属性。不含 Symbol 属性")]),t("li",[e._v("Object.keys()：返回对象自身的所有可枚举的属性的键名。")]),t("li",[e._v("JSON.stringify()：只串行化对象自身的可枚举的属性。")]),t("li",[e._v("Object.assign()： 忽略enumerable为false的属性，只拷贝对象自身的可枚举的属性。")])]),t("hr"),t("h2",[e._v("9.super 关键字")]),t("h2",[e._v("我们知道，this关键字总是指向函数所在的当前对象，ES6 又新增了另一个类似的关键字super，指向当前对象的原型对象。")]),t("h2",[e._v("10 Promise")]),t("blockquote",[t("p",[e._v("Promise.prototype.then()")])]),t("p",[e._v("then方法用于给promise状态发生变化时增加回调函数,其中第一个参数为resolve状态的回调函数，第二个参数为reject状态的回调函数")]),t("p",[e._v("then可以采用链式调用，将第一个回调函数的结果作为参数传递给第二个回调函数，如果返回的是Promise对象，则等待promise对象的状态发生改变再进行传递")]),t("blockquote",[t("p",[e._v("Promise.prototype.catch()")])]),t("p",[e._v("用于捕获promise内部错误，建议使用catch替代then里面的第二个error回调函数,catch方法返回的也是promise对象，后面可以接then")]),t("p",[e._v("promise内部错误会层层冒泡，直到被catch,若没有catch,也不会影响外部函数的执行，不会终止进程")]),t("blockquote",[t("p",[e._v("Promise.prototype.finally()")])]),t("p",[e._v("在promise执行完then、catch中的方法后无论promise状态是成功还是失败，都会执行finally")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e._v("server."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("listen")]),e._v("(port)\n  ."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("then")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// ...")]),e._v("\n  })\n  ."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("finally")]),e._v("(server."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("stop")]),e._v(");\n")])]),t("p",[e._v("finally函数不接受参数，finally方法总是会返回原来的值。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Promise")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("prototype")])]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("finally")]),e._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[e._v("callback")]),e._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" P = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("constructor")]),e._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("then")]),e._v("(\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[e._v("value")]),e._v("  =>")]),e._v(" P."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("resolve")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("callback")]),e._v("())."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("then")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[e._v("() =>")]),e._v(" value),\n    "),t("span",{pre:!0,attrs:{class:"hljs-function"}},[t("span",{pre:!0,attrs:{class:"hljs-params"}},[e._v("reason")]),e._v(" =>")]),e._v(" P."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("resolve")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("callback")]),e._v("())."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("then")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-function"}},[e._v("() =>")]),e._v(" { "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("throw")]),e._v(" reason })\n  );\n};\n")])]),t("blockquote",[t("p",[e._v("Promise.all")])]),t("ul",[t("li",[e._v("所有成功才成功，一个失败立即失败")])]),t("p",[e._v("如果Promise.all参数p自己定义了catch，那么错误不会被Promise.all的catch捕获，而且参数p的catch执行完后也会变成resolve")]),t("blockquote",[t("p",[e._v("Promise.race")])]),t("ul",[t("li",[e._v("谁的状态先改变就返回谁的，无论成功失败")])]),t("blockquote",[t("p",[e._v("Promise.allSettle")])]),t("ul",[t("li",[e._v("所有状态都完成才结束")])]),t("blockquote",[t("p",[e._v("Promise.any")])]),t("ul",[t("li",[e._v("当有一个成功时，返回成功，所有都失败才失败")])]),t("hr"),t("h2",[e._v("11.Itertator")]),t("blockquote",[t("p",[e._v("数组对象之间的转换")])]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" arrayLike = {\n    "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'0'")]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'a'")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'1'")]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'b'")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'2'")]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'c'")]),e._v(",\n    "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v("length")]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("3")]),e._v("\n};\n\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// ES6 的写法")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" arr2 = "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Array")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("from")]),e._v("(arrayLike); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// ['a', 'b', 'c']")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("let")]),e._v(" arr3=[...arrayLike] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("//报错，扩展运算符只能遍历iterable对象")]),e._v("\n\n")])]),t("blockquote",[t("p",[e._v("for...of")])]),t("p",[e._v("遍历具有iterator接口的对象，普通对象不行")]),t("p",[e._v("原生具备 Iterator 接口的数据结构如下。")]),t("ul",[t("li",[e._v("Array")]),t("li",[e._v("Map")]),t("li",[e._v("Set")]),t("li",[e._v("String")]),t("li",[e._v("TypedArray")]),t("li",[e._v("函数的 arguments 对象")]),t("li",[e._v("NodeList 对象")])]),t("p",[e._v("其他数据结构，都需要自己在Symbol.iterator属性上面部署,才能进行for...of操作，本质上是将非线性数据结构进行线性转换")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("RangeIterator")]),e._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("constructor")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[e._v("start, stop")]),e._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("value")]),e._v(" = start;\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("stop")]),e._v(" = stop;\n  }\n\n  ["),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Symbol")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("iterator")]),e._v("]() { "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("; }\n\n  "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("next")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("var")]),e._v(" value = "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("value")]),e._v(";\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("if")]),e._v(" (value < "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("stop")]),e._v(") {\n      "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("value")]),e._v("++;\n      "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("return")]),e._v(" {"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v("done")]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("false")]),e._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v("value")]),e._v(": value};\n    }\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("return")]),e._v(" {"),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v("done")]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("true")]),e._v(", "),t("span",{pre:!0,attrs:{class:"hljs-attr"}},[e._v("value")]),e._v(": "),t("span",{pre:!0,attrs:{class:"hljs-literal"}},[e._v("undefined")]),e._v("};\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("range")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}},[e._v("start, stop")]),e._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("RangeIterator")]),e._v("(start, stop);\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("for")]),e._v(" ("),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("var")]),e._v(" value "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("of")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("range")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("0")]),e._v(", "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("3")]),e._v(")) {\n  "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("console")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("(value); "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// 0, 1, 2")]),e._v("\n}\n")])]),t("blockquote",[t("p",[e._v("调用Iterator的场合")])]),t("ul",[t("li",[t("p",[e._v("数组、set解构赋值")])]),t("li",[t("p",[e._v("扩展运算符 ...")])]),t("li",[t("p",[e._v("yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。")])]),t("li",[t("p",[e._v("for...of")])]),t("li",[t("p",[e._v("Array.from()")])]),t("li",[t("p",[e._v("Map(), Set(), WeakMap(), WeakSet()（")])]),t("li",[t("p",[e._v("Promise.all()")])]),t("li",[t("p",[e._v("Promise.race()")])])]),t("blockquote",[t("p",[e._v("for...in缺点 for...in循环有几个缺点。")])]),t("ul",[t("li",[e._v("数组的键名是数字，但是for...in循环是以字符串作为键名“0”、“1”、“2”等等。")]),t("li",[e._v("for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。")]),t("li",[e._v("某些情况下，for...in循环会以任意顺序遍历键名。")])]),t("blockquote",[t("p",[e._v("for...of优势")])]),t("ul",[t("li",[e._v("有着同for...in一样的简洁语法，但是没有for...in那些缺点。")]),t("li",[e._v("不同于forEach方法，它可以与break、continue和return配合使用。")]),t("li",[e._v("提供了遍历所有数据结构的统一操作接口。")])]),t("hr"),t("h2",[e._v("12.Generator")]),t("ul",[t("li",[e._v("Generator函数可以看作一个状态机，可以记录函数执行位置")]),t("li",[e._v("不能作为构造函数使用，其遍历器是genertaor函数的实例")])]),t("p",[e._v("yield表达式，就暂停执行后面的操作，并将紧跟在yield后面的那个表达式的值，作为返回的对象的value属性值。")]),t("p",[e._v("yield表达式后面的表达式，只有当调用next方法、内部指针指向该语句时才会执行")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v("* "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("gen")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(") {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("yield")]),e._v("  "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("123")]),e._v(" + "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("456")]),e._v(";\n}\n")])]),t("blockquote",[t("p",[e._v("与iterator的联系")])]),t("p",[e._v("由于 Generator 函数就是遍历器生成函数，因此可以把 Generator 赋值给对象的Symbol.iterator属性，从而使得该对象具有 Iterator 接口。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("var")]),e._v(" myIterable = {};\nmyIterable["),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Symbol")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("iterator")]),e._v("] = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("function")]),e._v("* () {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("yield")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("1")]),e._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("yield")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("2")]),e._v(";\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("yield")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("3")]),e._v(";\n};\n\n[...myIterable] "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// [1, 2, 3]")]),e._v("\n")])]),t("blockquote",[t("p",[e._v("与上下文 JavaScript 代码运行时，会产生一个全局的上下文环境（context，又称运行环境），包含了当前所有的变量和对象。然后，执行函数（或块级代码）的时候，又会在当前上下文环境的上层，产生一个函数运行的上下文，变成当前（active）的上下文，由此形成一个上下文环境的堆栈（context stack）。")])]),t("blockquote",[t("p",[e._v("应用")])]),t("ul",[t("li",[e._v("异步操作同步化")]),t("li",[e._v("解决回调炼狱、then链式调用")]),t("li",[e._v("部署Iterator接口")]),t("li",[e._v("作为数据结构，提供类数组能力")])]),t("hr"),t("h2",[e._v("13.异步编程")]),t("ul",[t("li",[t("p",[e._v("promise将回调函数嵌套炼狱（callback hell），变成了链式调用")])]),t("li",[t("p",[e._v("promise的问题在于改进了回调函数的写法，代码非常冗余")])]),t("li",[t("p",[e._v("Thunk 函数 可以自动执行Generator 函数，传入执行next的回调函数")])]),t("li",[t("p",[e._v("co模块也是用于自动执行generator,返回Promise对象")])])]),t("p",[e._v("generator函数要想自动执行，必须有一种机制在异步操作有结果后将执行权交回给generator，回调函数、promise的then方法都可以；")]),t("p",[e._v("co 模块其实就是将两种自动执行器（Thunk 函数和 Promise 对象），包装成一个模块。使用 co 的前提条件是，Generator 函数的yield命令后面，只能是 Thunk 函数或 Promise 对象。如果数组或对象的成员，全部都是 Promise 对象，也可以使用 co；")]),t("hr"),t("h2",[e._v("14.async、await")]),t("p",[e._v("async、await是generator函数的语法糖，用async替代*，用await替代yield")]),t("p",[e._v("async的优势")]),t("ul",[t("li",[t("code",{pre:!0},[e._v("内置generator执行器")])]),t("li",[t("code",{pre:!0},[e._v("更好的语义")])]),t("li",[t("code",{pre:!0},[e._v("适用性更广")]),e._v("； co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。")]),t("li",[t("code",{pre:!0},[e._v("返回值是Promise")]),e._v(" async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。")])]),t("blockquote",[t("p",[e._v("使用注意点")])]),t("ul",[t("li",[e._v("不能放在foreach中执行，因为是foreach中是并发执行的")])]),t("hr"),t("h2",[e._v("15.class")]),t("ul",[t("li",[e._v("class内部是严格模式")]),t("li",[e._v("class声明的函数不存在变量提升，不能在未定以前使用")]),t("li",[e._v("单独将class内部方法解构出来使用，注意this的绑定，可以在构造函数中进行bind,或者在定义时使用箭头函数定义")])]),t("blockquote",[t("p",[e._v("静态方法")])]),t("p",[e._v("使用static关键字进行声明，通过类直接访问")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Foo")]),e._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("static")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("classMethod")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("return")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'hello'")]),e._v(";\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Foo")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("classMethod")]),e._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// 'hello'")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("var")]),e._v(" foo = "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("new")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Foo")]),e._v("();\nfoo."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("classMethod")]),e._v("()\n"),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// TypeError: foo.classMethod is not a function")]),e._v("\n")])]),t("p",[e._v("如果静态方法包含this关键字，这个this指的是类，而不是实例。")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Foo")]),e._v(" {\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("static")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("bar")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("this")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("baz")]),e._v("();\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("static")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("baz")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("console")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'hello'")]),e._v(");\n  }\n  "),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("baz")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-params"}}),e._v(") {\n    "),t("span",{pre:!0,attrs:{class:"hljs-variable language_"}},[e._v("console")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("log")]),e._v("("),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v("'world'")]),e._v(");\n  }\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Foo")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-title function_"}},[e._v("bar")]),e._v("() "),t("span",{pre:!0,attrs:{class:"hljs-comment"}},[e._v("// hello")]),e._v("\n")])]),t("p",[e._v("静态方法可以和非静态方法重名")]),t("p",[e._v("子类可以继承父类的静态方法")]),t("blockquote",[t("p",[e._v("静态属性")])]),t("p",[e._v("目前静态属性的定义是通过外部赋值定义，static内部定义正在提案")]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[t("span",{pre:!0,attrs:{class:"hljs-keyword"}},[e._v("class")]),e._v(" "),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Foo")]),e._v(" {\n}\n\n"),t("span",{pre:!0,attrs:{class:"hljs-title class_"}},[e._v("Foo")]),e._v("."),t("span",{pre:!0,attrs:{class:"hljs-property"}},[e._v("prop")]),e._v(" = "),t("span",{pre:!0,attrs:{class:"hljs-number"}},[e._v("1")]),e._v(";\n")])]),t("blockquote",[t("p",[e._v("私有属性、私有方法")])]),t("p",[e._v("只能在类的内部进行访问，目前没有正式方法实现，只有一些替代方案，例如对方法命名上做一些调整，尽可能不让外部拿到，如Symbol进行定义函数名称，但不是绝对安全，Reflect.ownkey()依旧能够获取到Symbol名称")]),t("hr"),t("h2",[e._v("16. class继承")]),t("p",[e._v("class子类必须在constructor()方法中调用super()，否则就会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，添加子类自己的实例属性和方法。如果不调用super()方法，子类就得不到自己的this对象。")]),t("p",[e._v("为什么子类的构造函数，一定要调用super()？原因就在于 ES6 的继承机制，与 ES5 完全不同。ES5 的继承机制，是先创造一个独立的子类的实例对象，然后再将父类的方法添加到这个对象上面，即“实例在前，继承在后”。ES6 的继承机制，则是先将父类的属性和方法，加到一个空的对象上面，然后再将该对象作为子类的实例，即“继承在前，实例在后”。这就是为什么 ES6 的继承必须先调用super()方法，因为这一步会生成一个继承父类的this对象，没有这一步就无法继承父类。")]),t("p",[t("code",{pre:!0},[e._v("除了私有属性，父类的所有属性和方法，都会被子类继承，其中包括静态方法。")])]),t("blockquote",[t("p",[e._v("super")])]),t("ul",[t("li",[e._v("super作为函数调用时，代表父类的构造函数")]),t("li",[e._v("super()内部的this指向的是子类")]),t("li",[e._v("uper作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。")])]),t("hr"),t("h2",[e._v("17.模块化")]),t("p",[e._v("conmmonjs用于服务器，AMD用于浏览器，都是在函数运行时才能确定对象，commonjs支持动态加载")]),t("p",[e._v("commonjs实际上对整个引入模块的加载，然后确定自己想要的")]),t("p",[e._v("ES6模块可以做到编译时确定依赖关系，能够做到静态优化，效率更高")]),t("p",[e._v("编译时加载的好处是能够进行静态分析，比如引入宏、类型检查这些只能依靠静态分析实现的功能。")]),t("p",[e._v("ES6模块的其他优点")]),t("ul",[t("li",[t("p",[e._v("能够在服务器和浏览器都使用，兼容性好")])]),t("li",[t("p",[e._v("未来浏览器的新API可以通过模块格式提供，不需要进行全局变量")])]),t("li",[t("p",[e._v("不再需要对象作为命名空间（比如Math对象）")])]),t("li",[t("p",[e._v("ES6模块默认采用严格模式")])])]),t("blockquote",[t("p",[e._v("模块使用 import、export")])]),t("ul",[t("li",[e._v("import、export只能出现在模块顶层作用域，不能出现在块级作用域内部，不然就无法进行静态编译了")]),t("li",[e._v("CommonJS 模块输出的是值的缓存，ES6模块是输入对值的引用，存在动态更新")]),t("li",[e._v("import命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。可以理解为指针不能变，但是如果指针是引用类型的话，可以更改他的属性")]),t("li",[e._v("import命令具有提升效果，会提升到整个模块的头部，首先执行。因为import命令是编译阶段执行的，在代码运行之前。")]),t("li",[e._v("import语句会执行所加载的模块，多次引用一个模块，只会执行一次")])]),t("hr"),t("h2",[e._v("18. 模块加载")]),t("blockquote",[t("p",[e._v("浏览器")])]),t("p",[e._v("浏览器加载 ES6 模块，也使用 "),t("code",{pre:!0},[e._v("<script>")]),e._v('标签，但是要加入type="module"属性')]),t("pre",{pre:!0},[t("code",{pre:!0,attrs:{"v-pre":"",class:"language-js"}},[e._v("<script type="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"module"')]),e._v(" src="),t("span",{pre:!0,attrs:{class:"hljs-string"}},[e._v('"./foo.js"')]),e._v("><\/script>\n")])]),t("p",[e._v("浏览器识别到module类型统一按照类似defer标签异步加载，不会阻塞DOM解析，多个能够按照顺序执行")]),t("p",[e._v("模块脚本的几个特点")]),t("ul",[t("li",[e._v("代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。")]),t("li",[e._v("模块脚本自动采用严格模式，不管有没有声明use strict。")]),t("li",[e._v("模块之中，可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用export命令输出对外接口。")]),t("li",[e._v("模块之中，顶层的this关键字返回undefined，而不是指向window。也就是说，在模块顶层使用this关键字，是无意义的。")]),t("li",[e._v("同一个模块如果加载多次，将只执行一次。")])]),t("h3",[t("code",{pre:!0},[e._v("ES6 模块与 CommonJS 模块的差异")])]),t("ul",[t("li",[e._v("CommonJS 模块输出的是一个值的浅拷贝，ES6 模块输出的是值的引用。")]),t("li",[e._v("CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。")]),t("li",[e._v("CommonJS 模块的require()是同步加载模块，ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段。")]),t("li",[e._v("CommonJS 模块是 Node.js 专用的，与 ES6 模块不兼容。语法上面，两者最明显的差异是，CommonJS 模块使用require()和module.exports，ES6 模块使用import和export。")])]),t("p",[e._v("CommonJS 模块输出的是值的拷贝，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。")]),t("p",[e._v("export通过接口，输出的是同一个值。不同的脚本加载这个接口，得到的都是同样的实例。")]),t("blockquote",[t("p",[e._v("循环加载")])]),t("ul",[t("li",[e._v("CommonJS 模块遇到循环加载时，返回的是当前已经执行的部分的值，而不是代码全部执行后的值，")]),t("li",[e._v("ES6 处理“循环加载”，一步步执行找不到动态引用的值会报错")])]),t("hr"),t("h2",[e._v("19.严格模式特点")]),t("ul",[t("li",[e._v("变量必须声明后再使用")]),t("li",[e._v("函数的参数不能有同名属性，否则报错")]),t("li",[e._v("不能使用with语句")]),t("li",[e._v("不能对只读属性赋值，否则报错")]),t("li",[e._v("不能使用前缀 0 表示八进制数，否则报错")]),t("li",[e._v("不能删除不可删除的属性，否则报错")]),t("li",[e._v("不能删除变量delete prop，会报错，只能删除属性delete global[prop]")]),t("li",[e._v("eval不会在它的外层作用域引入变量")]),t("li",[e._v("eval和arguments不能被重新赋值")]),t("li",[e._v("arguments不会自动反映函数参数的变化")]),t("li",[e._v("不能使用arguments.callee")]),t("li",[e._v("不能使用arguments.caller")]),t("li",[e._v("禁止this指向全局对象")]),t("li",[e._v("不能使用fn.caller和fn.arguments获取函数调用的堆- 栈")]),t("li",[e._v("增加了保留字（比如protected、static和interface）")])])])])])}],le={},ae=Object(n["a"])(le,te,re,!1,null,null,null),oe=ae.exports,ne={name:"Home",components:{BrowserCache:p,ParseUrl:d,DeferAndAsync:g,HttpsProtocol:w,JS01:O,SimpleRequest:D,HTML01:I,HTTPBasic:$,BrowserTheory:W,BrowserOptimize:se,ES6Summary:oe},props:{},data:function(){return{currentView:"BrowserCache",notesMap:[{code:"ES6Summary",component:"ES6Summary"},{code:"browser-cache",component:"BrowserCache"},{code:"ParseUrl",component:"ParseUrl"},{code:"DeferAndAsync",component:"DeferAndAsync"},{code:"JS01",component:"JS01"},{code:"HttpsProtocol",component:"HttpsProtocol"},{code:"SimpleRequest",component:"SimpleRequest"},{code:"html-basic",component:"HTML01"},{code:"http",component:"HTTPBasic"},{code:"BrowserTheory",component:"BrowserTheory"},{code:"BrowserOptimize",component:"BrowserOptimize"}]}},watch:{$route:{handler:function(e){var s=e.params.articleName,t=this.notesMap.filter((function(e){return e.code===s}));t&&t.length>0&&(this.currentView=t[0].component)},deep:!0}},computed:{},mounted:function(){var e=this.$route.params,s=e.articleName,t=this.notesMap.filter((function(e){return e.code===s}));this.currentView=t[0].component},methods:{}},_e=ne,ve=(t("922a"),Object(n["a"])(_e,r,l,!1,null,null,null));s["default"]=ve.exports}}]);
//# sourceMappingURL=chunk-781fa144.91b55f94.js.map